[{"title":"撮合系统设计","date":"2019-06-25T16:00:00.000Z","path":"2019/06/26/业务场景/交易所/撮合系统设计/","text":"万丈高楼平地起的前提是地基好. 整体的架构细分实现 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"交易所","slug":"交易所","permalink":"https://lywlefan.github.io/tags/交易所/"},{"name":"撮合","slug":"撮合","permalink":"https://lywlefan.github.io/tags/撮合/"}]},{"title":"1.disruptor初识","date":"2019-06-25T16:00:00.000Z","path":"2019/06/26/高并发/disruptor学习/1.disruptor初识/","text":"disruptor号称能够在一个线程里每秒处理6百万订单,业务逻辑处理器完全是运行在内存中，使用事件源驱动方式。 要学的概念乐观锁打个比方理解乐观锁就是到桥头再看有没有车来过此桥,没有的话快速过桥. 悲观锁打个比方理解悲观锁说白了就是先发制人,我的车要过桥,但是我担心桥上有其他车,所以我提前把桥口加一个锁,我到桥头了在开锁过桥,过去了再把锁子接触了. 死锁打个比方理解简单的比方,两俩车同时过一个桥,不能倒车,如果两辆车同时在桥上就会造成死锁,车就相当于我们的线程,桥就相当于资源. CASCAS简介谷歌翻译CAS是比较并转换,java.util.concurrent包中借助CAS实现了区别于synchronouse同步锁的一种乐观锁。 CAS应用CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。 非阻塞算法 （nonblocking algorithms） 一个线程的失败或者挂起不应该影响其他线程的失败或挂起的算法。 CAS原理CAS通过调用JNI的代码实现的。JNI:Java Native Interface为JAVA本地调用，允许java调用其他语言而compareAndSwapInt就是借助C来调用CPU底层指令实现的。 CAS缺点 ABA问题 循环时间长开销大 只能保证一个共享变量的原子操作 缓存行初识性能 一个线程每秒处理6百万订单 内存中运行 ,使用事件源驱动方式 业务逻辑处理核心Disruptor hello world 建立一个event类,用于创建Event类实例对象 需要有一个监听事件类,用于处理数据(Event类) 实例化Disruptor实例,配置一系列参数,编写Disruptor核心组件 编写生产者组件,向Disruptor容器中去投递数据 核心讲解 RingBuffer基于数组的缓存实现,也是创建sequencer与定义WaitStrategy的入口 RingBuffer拥有一个序号,这个需要指向数组中下一个可用的元素 收尾相接的环 (环状数组) 假如缓存区芝麻满了,芝麻扔到哪里? 假如缓存区没芝麻了,如何取芝麻? 2的n次方更利于计算 Disruptor持有RingBuffer、消费者线程池Executor、消费者集合ConsumerRepository等引用. Sequence 通顺序递增的序号来编号,管理进行交换的数据(事件) 对数据(事件)的处理过程总是沿着序号逐个递增处理 一个Sequence用于跟踪标识某个特定的事件处理者(RingBuffer/Producer/Consumer)的处理进度 Sequence可以看成是一个AtomicLong用于标识进度 还有另外一个目的就是防止不同Sequence之间CPU缓存伪共享(Flase Sharing)的问题 Sequencer Sequencer是Disruptor的真正核心,包含Sequence 此接口有两个实现类 SingleProducerSequencer MultiProducerSequencer 主要实现生产者和消费者之间快速、正确的传递数据并发算法 Sequence Barrier 用于保持RingBuffer的Main Published Sequence(Producer)和Consumer之间平衡关系; 决定Consumer是否还有可处理事件逻辑 WaitStrategy 决定一个消费者将如何等待生产者将Event置入Disruptor 主要策略 BlockWaitStrategy 最低效策略 cpu消耗最小 在各种不同部署环境中提供更加一致性能表现 SleepingWaitStrategy 和上面性能差不多 cpu性能和上面差不多 对生产者线程影响最小,适合用于异步日志类似的场景 YieldingWaitStrategy 性能最好 适用低延迟系统 要求极高性能 要求极高性能且事件处理线数小于CPU逻辑核心数场景,列如:CPU开启超线程的特性 Event 从生产者到消费者过程中所处理的数据单元 Disruptor中没有代码表示Event,因为它完全是由用户定义的 EventProcessor 主要事件循环,处理Disruptor中的Event,拥有消费者Sequence 他是一个实现类是BatchEventProcessor,包含了event loop有效的实现,并且将回调一个EventHandler接口的实现对象. EventHandler 由用户并且代表了Disruptor中的一个消费者接口,也就是我们消费者逻辑都要写到这里. WorkProcessor 确保每个sequence只被一个processor消费,在同一个WorkPool中处理多个WorkProcessor不会消费同样的sequence 参考文档 【1】简书主页·share猿 【2】掘金主页·share猿 【3】disruptor官网 【4】JAVA CAS原理深度分析 【5】并发框架Disruptor译文 【6】从构建分布式秒杀系统聊聊Disruptor高性能队列 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"并发","slug":"并发","permalink":"https://lywlefan.github.io/tags/并发/"},{"name":"disruptor","slug":"disruptor","permalink":"https://lywlefan.github.io/tags/disruptor/"}]},{"title":"自定义线程池","date":"2019-06-25T16:00:00.000Z","path":"2019/06/26/基础巩固/java/线程/自定义线程池/","text":"万丈高楼平地起的前提是地基好. 为什么要定义线程池??如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。那么有没有一种办法使得线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务？在Java中可以通过线程池来达到这样的效果。首先我们从最核心的ThreadPoolExecutor类中的方法讲起。 进一步学习实现原理java.uitl.concurrent.ThreadPoolExecutor类是线程池中最核心的一个类，因此如果要透彻地了解Java中的线程池，必须先了解这个类。下面我们来看一下ThreadPoolExecutor类的具体实现源码。 在ThreadPoolExecutor类中提供了四个构造方法： 1234567891011121314151617181920212223242526272829public class ThreadPoolExecutor extends AbstractExecutorService &#123; ..... public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue); public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory); public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue,RejectedExecutionHandler handler); public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler); ...&#125; 从上面的代码可以得知，ThreadPoolExecutor继承了AbstractExecutorService类，并提供了四个构造器，事实上，通过观察每个构造器的源码具体实现，发现前面三个构造器都是调用的第四个构造器进行的初始化工作。 下面解释下一下构造器中各个参数的含义： corePoolSize：核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中； maximumPoolSize：线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程； keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0； unit：参数keepAliveTime的时间单位 workQueue：一个阻塞队列，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择： ArrayBlockingQueue; LinkedBlockingQueue; SynchronousQueue; threadFactory：线程工厂，主要用来创建线程； handler：表示当拒绝处理任务时的策略，默认有以下四种取值： ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。 ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程） ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务 线程池执行的流程当任务提交给ThreadPoolExecutor 线程池中，先检查核心线程数是否已经全部使用，如果没有交由核心线程去执行任务，如果核心线程数已经全部占用，则将任务添加到队列里面，如果队列已经占满，比较当前线程池的中线程的数量是不是与超过maximumPoolSize，如果没有查过则创建线程去执行，也就是说线程池最多可以接受多少任务呢？就是maximumPoolSize+队列的大小。当线程池中的线程的数量大于corePoolSize数量有空闲线程则执行回收，回收时间是keepAliveTime，单位是unit，都是初始化的时候设置的。 下面通过代码来说明： 定义一个实现了Runnable接口的类，当作任务类； 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273public class MyTask implements Runnable &#123; private int taskId; private String taskName; public int getTaskId() &#123; return taskId; &#125; public void setTaskId(int taskId) &#123; this.taskId = taskId; &#125; public String getTaskName() &#123; return taskName; &#125; public void setTaskName(String taskName) &#123; this.taskName = taskName; &#125; public MyTask(int taskId, String taskName) &#123; this.taskId = taskId; this.taskName = taskName; &#125; @Override public void run() &#123; System.out.println(\"taskId:\" + taskId + \",taskName:\" + taskName); try &#123; Thread.sleep(10000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"基础","slug":"基础","permalink":"https://lywlefan.github.io/tags/基础/"},{"name":"线程","slug":"线程","permalink":"https://lywlefan.github.io/tags/线程/"},{"name":"线程池","slug":"线程池","permalink":"https://lywlefan.github.io/tags/线程池/"}]},{"title":"环形缓冲区","date":"2019-06-24T16:00:00.000Z","path":"2019/06/25/基础巩固/java/数据结构/环形缓冲区/","text":"万丈高楼平地起的前提是地基好. 环形缓冲区介绍圆形缓冲区（circular buffer），也称作圆形队列（circular queue），循环缓冲区（cyclic buffer），环形缓冲区（ring buffer），是一种数据结构用于表示一个固定尺寸、头尾相连的缓冲区，适合缓存数据流。 用法圆形缓冲区的一个有用特性是：当一个数据元素被用掉后，其余数据元素不需要移动其存储位置。相反，一个非圆形缓冲区（例如一个普通的队列）在用掉一个数据元素后，其余数据元素需要向前搬移。换句话说，圆形缓冲区适合实现先进先出缓冲区，而非圆形缓冲区适合后进先出缓冲区。 圆形缓冲区适合于事先明确了缓冲区的最大容量的情形。扩展一个圆形缓冲区的容量，需要搬移其中的数据。因此一个缓冲区如果需要经常调整其容量，用链表实现更为合适。 写操作覆盖圆形缓冲区中未被处理的数据在某些情况下是允许的。特别是在多媒体处理时。例如，音频的生产者可以覆盖掉声卡尚未来得及处理的音频数据。 工作过程一个圆形缓冲区最初为空并有预定的长度。例如，这是一个具有七个元素空间的圆形缓冲区，其中底部的单线与箭头表示“头尾相接”形成一个圆形地址空间： 假定1被写入缓冲区中部（对于圆形缓冲区来说，最初的写入位置在哪里是无关紧要的）： 再写入2个元素，分别是2 &amp; 3 — 被追加在1之后： 如果两个元素被处理，那么是缓冲区中最老的两个元素被卸载。在本例中，1 &amp; 2被卸载，缓冲区中只剩下3: 如果缓冲区中有7个元素，则是满的： 如果缓冲区是满的，又要写入新的数据，一种策略是覆盖掉最老的数据。此例中，2个新数据— A &amp; B — 写入，覆盖了3 &amp; 4: 也可以采取其他策略，禁止覆盖缓冲区的数据，采取返回一个错误码或者抛出异常。 最终，如果从缓冲区中卸载2个数据，不是3 &amp; 4 而是 5 &amp; 6 。因为 A &amp; B 已经覆盖了3 &amp; 4： 圆形缓冲区工作机制由于计算机内存是线性地址空间，因此圆形缓冲区需要特别的设计才可以从逻辑上实现。 读指针与写指针一般的，圆形缓冲区需要4个指针： 在内存中实际开始位置； 在内存中实际结束位置，也可以用缓冲区长度代替； 存储在缓冲区中的有效数据的开始位置（读指针）； 存储在缓冲区中的有效数据的结尾位置（写指针）。 读指针、写指针可以用整型值来表示。 下例为一个未满的缓冲区的读写指针： 下例为一个满的缓冲区的读写指针： 区分缓冲区满或者空缓冲区是满、或是空，都有可能出现读指针与写指针指向同一位置： 250px有多种策略用于检测缓冲区是满、或是空. 总是保持一个存储单元为空缓冲区中总是有一个存储单元保持未使用状态。缓冲区最多存入个数据。如果读写指针指向同一位置，则缓冲区为空。如果写指针位于读指针的相邻后一个位置，则缓冲区为满。这种策略的优点是简单、鲁棒；缺点是语义上实际可存数据量与缓冲区容量不一致，测试缓冲区是否满需要做取余数计算。 使用数据计数这种策略不使用显式的写指针，而是保持着缓冲区内存储的数据的计数。因此测试缓冲区是空是满非常简单；对性能影响可以忽略。缺点是读写操作都需要修改这个存储数据计数，对于多线程访问缓冲区需要并发控制。 镜像指示位缓冲区的长度如果是n，逻辑地址空间则为0至n-1；那么，规定n至2n-1为镜像逻辑地址空间。本策略规定读写指针的地址空间为0至2n-1，其 中低半部分对应于常规的逻辑地址空间，高半部分对应于镜像逻辑地址空间。当指针值大于等于2n时，使其折返（wrapped）到ptr-2n。使用一位表 示写指针或读指针是否进入了虚拟的镜像存储区：置位表示进入，不置位表示没进入还在基本存储区。 在读写指针的值相同情况下，如果二者的指示位相同，说明缓冲区为空；如果二者的指示位不同，说明缓冲区为满。这种方法优点是测试缓冲区满/空很简 单；不需要做取余数操作；读写线程可以分别设计专用算法策略，能实现精致的并发控制。 缺点是读写指针各需要额外的一位作为指示位。 如果缓冲区长度是2的幂，则本方法可以省略镜像指示位。如果读写指针的值相等，则缓冲区为空；如果读写指针相差n，则缓冲区为满，这可以用条件表达式（写指针 == (读指针 异或 缓冲区长度)）来判断。 读/写 计数用两个有符号整型变量分别保存写入、读出缓冲区的数据数量。其差值就是缓冲区中尚未被处理的有效数据的数量。这种方法的优点是读线程、写线程互不干扰；缺点是需要额外两个变量。 记录最后的操作使用一位记录最后一次操作是读还是写。读写指针值相等情况下，如果最后一次操作为写入，那么缓冲区是满的；如果最后一次操作为读出，那么缓冲区是空。 这种策略的缺点是读写操作共享一个标志位，多线程时需要并发控制。 POSIX优化实现Linux内核的kfifo在Linux内核文件kfifo.h和kfifo.c中，定义了一个先进先出圆形缓冲区实现。如果只有一个读线程、一个写线程，二者没有共享的被修改的控制变量，那么可以证明这种情况下不需要并发控制。kfifo就满足上述条件。kfifo要求缓冲区长度必须为2的幂。读、写指针分别是无符号整型变量。把读写指针变换为缓冲区内的索引值，仅需要“按位与”操作：（指针值 按位与 （缓冲区长度-1））。这避免了计算代价高昂的“求余”操作。且下述关系总是成立： 读指针 + 缓冲区存储的数据长度 == 写指针即使在写指针达到了无符号整型的上界，上溢出后写指针的值小于读指针的值，上述关系仍然保持成立（这是因为无符号整型加法的性质）。 kfifo的写操作，首先计算缓冲区中当前可写入存储空间的数据长度：len = min[待写入数据长度, 缓冲区长度 - （写指针 - 读指针）]然后，分两段写入数据。第一段是从写指针开始向缓冲区末尾方向；第二段是从缓冲区起始处写入余下的可写入数据，这部分可能数据长度为0即并无实际数据写入。 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"基础","slug":"基础","permalink":"https://lywlefan.github.io/tags/基础/"},{"name":"数据结构","slug":"数据结构","permalink":"https://lywlefan.github.io/tags/数据结构/"},{"name":"环形缓冲区","slug":"环形缓冲区","permalink":"https://lywlefan.github.io/tags/环形缓冲区/"}]},{"title":"LMAX架构","date":"2019-06-20T16:00:00.000Z","path":"2019/06/21/架构/LMAX架构/","text":"万丈高楼平地起的前提是地基好. LMAX架构简介 该架构主要基于：Disruptor + In Memory DDD + Event Sourcing 通过高并发框架（Disruptor）实现用户事件的输入和Domain Event的输出； 一个常驻内存的Business Logic Processor（DDD领域模型），它负责在纯内存中处理业务逻辑；关键点：首先确保用户输入事件被持久化到数据库，并定时创建快照，然后在内存中响应事件更改业务对象的状态；因为一切都是在内存中处理，所以没有IO，也不需要数据库事务，非常快； 机器down了怎么办？因为我们首先确保了业务对象的任何状态改变之前先持久化用户输入事件，所以在down机的时候通过事件回溯重新得到最新的业务对象。因为有了快照的保存，所以重建对象也非常快； 该架构的主要观点： 肯定了In-Memory内存模式 + 异步输入与输出事件（Disruptor） + Event Sourcing 架构，LMAX实践也验证了这个架构。这个架构降低复杂性。 LMAX的核心是新型并发框架Disruptor，其核心是根据现代CPU硬件缓存特点发明不同于通用LinkedList或Queue的新型数据结构RingBuffer。 号称并发未来的Actor模型被LMAX团队验证是有瓶颈的。 提出新的并发模型，每个CPU一个线程，多个CPU多个线程并发模式，摒弃了锁模式。 ORM等Hibernate没有完全解决OO的目标，关系数据库的事务也不是最后救命的稻草。LMAX用自己的事件记录的方式实现事务，这也不同于所谓内存事务STM。 架构师要分离关注，一是通过DDD降低业务的复杂性；二是通过技术探索创新，降低技术平台的复杂性，让程序员更多精力投入业务问题解决上。 参考文档 【1】简书主页·share猿 【2】掘金主页·share猿 【3】LMAX架构简介·汤雪华 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"并发","slug":"并发","permalink":"https://lywlefan.github.io/tags/并发/"},{"name":"LMAX","slug":"LMAX","permalink":"https://lywlefan.github.io/tags/LMAX/"},{"name":"disruptor","slug":"disruptor","permalink":"https://lywlefan.github.io/tags/disruptor/"}]},{"title":"java枚举的总结和学习","date":"2019-06-20T16:00:00.000Z","path":"2019/06/21/基础巩固/java/java枚举的总结和学习/","text":"万丈高楼平地起的前提是地基好. 枚举基础规范 实例常量用大写 enum是个类(特别实用的特性,可以在switch语句中使用) 方法 toString:显示某个实例的名字 ordinal:显示常量的顺序 static values:按枚举常量顺序,产生常量构成的数组. 枚举类可以实现一个接口 使用常量123public enum Color &#123; RED, GREEN, BLANK, YELLOW &#125; switch12345678910111213141516171819enum Signal &#123; GREEN, YELLOW, RED &#125; public class TrafficLight &#123; Signal color = Signal.RED; public void change() &#123; switch (color) &#123; case RED: color = Signal.GREEN; break; case YELLOW: color = Signal.RED; break; case GREEN: color = Signal.YELLOW; break; &#125; &#125; &#125; 构造方法&emsp;&emsp;规定构造方法必须为private修饰符所修饰，也就是说只能在类的内部构造，不能在其他类中通过构造方法新增枚举类型。 在枚举类中创建一个构造函数 123456789@Getter@AllArgsConstructorpublic enum CommonEnum &#123; SUCCESS(\"交易成功\",\"SUCCESS\"); private String name; private String value; &#125; 枚举可以实现一个接口 123456789101112131415161718192021222324252627public interface Behaviour &#123; void print(); String getInfo(); &#125; public enum Color implements Behaviour&#123; RED(&quot;红色&quot;, 1), GREEN(&quot;绿色&quot;, 2), BLANK(&quot;白色&quot;, 3), YELLO(&quot;黄色&quot;, 4); // 成员变量 private String name; private int index; // 构造方法 private Color(String name, int index) &#123; this.name = name; this.index = index; &#125; //接口方法 @Override public String getInfo() &#123; return this.name; &#125; //接口方法 @Override public void print() &#123; System.out.println(this.index+&quot;:&quot;+this.name); &#125; &#125; 使用接口组织枚举12345678public interface Food &#123; enum Coffee implements Food&#123; BLACK_COFFEE,DECAF_COFFEE,LATTE,CAPPUCCINO &#125; enum Dessert implements Food&#123; FRUIT, CAKE, GELATO &#125; &#125; 关于枚举集合的使用&emsp;&msp;java.util.EnumSet和java.util.EnumMap是两个枚举集合。EnumSet保证集合中的元素不重复；EnumMap中的 key是enum类型，而value则可以是任意类型。关于这个两个集合的使用就不在这里赘述，可以参考JDK文档。 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"基础","slug":"基础","permalink":"https://lywlefan.github.io/tags/基础/"},{"name":"java","slug":"java","permalink":"https://lywlefan.github.io/tags/java/"}]},{"title":"学习的方法论","date":"2019-06-16T16:00:00.000Z","path":"2019/06/17/指导思想/方法论/学习的方法论/","text":"高效学习方法学习要有明确的目的性&emsp;&emsp; 比如我现在要学习java基础,那么我学习java基础的目的性是啥? 给自己提出问题,把似是而非的问题用自己的话能讲清楚,进一步完善自己的基础总结笔记,记住,任何知识不是一蹴而就的,要不断的迭代学习. 学习要有整体规划学习要有一个好的环境,在好的环境下不成长都难 【1】简书主页·share猿【2】掘金主页·share猿【3】JavaGuide·Snailclimb 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"指导思想","slug":"指导思想","permalink":"https://lywlefan.github.io/tags/指导思想/"},{"name":"学习方法","slug":"学习方法","permalink":"https://lywlefan.github.io/tags/学习方法/"}]},{"title":"用得上的商学课-骆骋","date":"2019-06-15T16:00:00.000Z","path":"2019/06/16/读书/2019/6月/用得上的商学课-骆骋/","text":"读书笔记自序你有多久没有投资你自己了？ 傅盛曾在一篇文章中提到，所谓成长，就是认知升级。有一幅认知结构图，说明了人们认知的四种状态。第一种，不知道自己不知道——以为自己什么都知道。这种人占95%。第二种，知道自己不知道——有敬畏之心，有空杯心态。这种人占4%。第三种，知道自己知道——抓住了事物的规律，提升了自己的认知。这种人只有0.9%。1 看得透的用户心理 机会成本我们每天都在做选择，而每个人所拥有的时间、金钱、社会资源都是有限的，所以我们为了得到某一样东西，通常都不得不放弃另外一些东西。在经济学里，这些不得不放弃的东西，就是我们为当前选择所付出的机会成本。 鱼与熊掌不可兼得。放弃的鱼，就是你选择熊掌的代价。 一句话理解比较优势：我做得比你好，也得你来做。应该把事情交给机会成本最低的人去做。 沉没成本人并不总是理性的，在做决策时总会被已经发生的成本影响。经济学上将这种已经发生且无法收回的投入称为沉没成本。 经济学告诉我们，做决策时，不要考虑沉没的成本。 懂得“放弃”比“坚持”更可贵。 沉没成本 只有交55美元成为会员，你才能进入好市多门店，并可享受海量的优质低价商品。这55美元就相当于商家给你制造的一个沉没成本，让你控制不住自己，就算吃不完、用不完，也总想再多买一点儿。消费者的心理是：只有多买，才能把拿不回来的会员费摊薄一点儿。这种想法一旦作祟，商家就可以坐等数钱了。 只有交55美元成为会员，你才能进入好市多门店，并可享受海量的优质低价商品。这55美元就相当于商家给你制造的一个沉没成本，让你控制不住自己，就算吃不完、用不完，也总想再多买一点儿。消费者的心理是：只有多买，才能把拿不回来的会员费摊薄一点儿。这种想法一旦作祟，商家就可以坐等数钱了。 一句话理解沉没成本：因为“来都来了”，所以“将错就错”。 工业经济告诉我们一个规律：生产一件产品，越标准化越好，越流程化越好，款式越少越好，规模越大越好。 边际成本边际成本是生产者理论中的一个概念，是指额外生产一单位产品需要付出的成本。相应地，每多销售一单位产品获取的收益就是边际收益。 一句话理解边际成本：飞机起飞前的座位，甚至可以只卖一元。 因交易行为本身而产生的成本，就是交易成本。 科斯认为，企业的内部交易成本如果高于市场交易成本，企业就不应该内部扩张了，也就是别再雇人做了，而应该更多地寻求外部合作；反过来，如果内部交易成本更低，那么就应该自己雇人做。 丰田一贯推行的看板管理，就是决策流程信息化的典范。 一句话理解交易成本：一个人的世界中不存在的成本，都是交易成本。 第2章 价格，是你想定就能定的吗？ 微观经济·价格 供需定理[插图]经济学告诉我们，产品有价，不是因为制造产品有成本，而是因为市场对产品有需求。产品售价如何，是由市场上供给对于需求的相对稀缺性来决定的。 供需定理是经济学中最基础的概念，相对简单，这里不再赘述，但是学会给定价归因，可以让你对商业有更透彻的理解。以下三点也许能给你一些启示。 第一，找准真实需求。 第二，摸清竞争环境。 第三，垄断更高利润。 一句话理解供需定理：供不应求，价格上涨；供过于求，价格下跌。 需求弹性就是某种商品的需求量对其价格变化所做出的反应程度。 需求弹性商品价格的变化会在不同程度上影响销量，这种价格和销量之间的动态关系，叫作需求价格弹性，简称需求弹性。 从另一个角度来说，当大家都想用低价策略抢夺市场，行业深陷价格战的时候，你的最优策略可能是通过技术创新或效率提升，来优化消费者的体验，提升品牌的附加值，让消费者愿意为你的优质品牌或产品买单。这种做法叫作“差异化战略”。 那如何判断商品需求弹性的大小呢？我建议从以下三个方面入手。 第一，看商品是否属于生活必需品。 第二，看商品是否存在可替代性。 第三，看消费者调整需求的时间。 一句话理解需求弹性：弹性小，我涨价；弹性大，我降价。 沃图（Vertu） 凡勃伦效应凡勃伦效应由美国经济学家凡勃伦[插图]提出。他发现，有的商品价格越高，越能吸引消费者购买。高价不一定代表高品质，但这件商品一定能让购买者自我感觉良好。 商品包含两种价值：一种是功能性价值，一种是炫耀性价值 教你如何让品牌平添奢侈品的基因。 气质这个词我是不赞同的，更准确的说应该是让品牌有高端的文化。 第一，给品牌打造气质。 第一，给品牌打造气质。 第二，给产品增加辨识度。 第三，给用户贴标签。 一句话理解凡勃伦商品：越贵越买，不是“傻”，而是“壕”。 这个故事告诉我们，世界上最好吃的东西，叫作“饿”。 消费者在一段时间内连续消费同一种商品时，所获得的满足感会越来越低 古人云：“入芝兰之室，久而不闻其香。” 边际效用边际效用是指某物品每增加一单位消费量，消费者获得的额外满足程度。 第一，如果你是商家，就要学会利用消费者的“贪得无厌”。 第二，如果你是管理层，就要学会利用员工的“喜新厌旧”。 第三，如果你是单身，找对象时要学会预见自己的“审美疲劳”。 一句话理解边际效用：世界上最好吃的东西，叫作“饿”。 “价格歧视” 价格歧视价格歧视是指针对不同的消费者或者不同的消费场景，设定不同的价格，从而攫取消费者愿意付出的最后一分钱。 要想把价格歧视运用到商业策略中，具体该从什么角度入手？ 第一，划分时间。 第二，区隔地点。 第三，筛选人群。 一句话理解价格歧视：没有看低你，只想“掏空”你。 第3章 博弈，也是有价格的 微观经济·博弈论不怕神一样的对手，就怕猪一样的队友。” 要想摆脱囚徒困境，有以下三种方法。 第一，增加背叛的成本。 第二，引入第三方。 囚徒困境囚徒困境最早是由普林斯顿大学的数学家阿尔伯特·塔克在1950年提出的。它告诉我们，每当个人利益与集体利益发生冲突的时候，足够理性的人会优先追求个人利益，正所谓“人不为己，天诛地灭”。但是，当大家都从利己角度出发的时候，结果却往往是损人不利己。 第三，重复博弈。 一句话理解囚徒困境：背叛，也是有价格的，而聪明人懂得怎样让这个价格高到对方不会背叛。 人质困境在一群人面对威胁或损失时，“第一个采取行动”的决定是最难做出的，因为“出头鸟”往往会付出惨重的代价，因此也有人把人质困境叫作出头鸟困境。 “明哲保身”的人质困境 第一，力挺“出头鸟”。 第二，保护“出头鸟” 第三，奖励“出头鸟” 一句话理解人质困境：出头，也是有价格的。而聪明人懂得怎样让这个价格低到对方愿意出头。 智猪博弈博弈论大师约翰·纳什在1950年提出了著名的智猪博弈模型。他指出，在博弈过程中，无论大猪去不去踩踏板，小猪的最优策略都是等待。 作为市场上处于弱势的“小猪”，我们可以怎样应用智猪博弈？还是老套路，给你三条建议。 第一，有自知之明，不要轻言“教育市场”。 第二，盯紧大猪，它可能是你最好的合作伙伴。 实际上，如果你仔细思考就会知道，滴滴出行的竞争对手从来就不是快的打车，而是传统的出租车公司。两家公司一起“烧钱”，目的就是让消费者了解并接受“用手机叫车”这种消费方式。 神州专车就很聪明，它没有正面参与“烧钱”大战，而是一方面借助互联网专车的风口推广自己的品牌，另一方面将自己定位为高端用车服务，和滴滴出行、快的打车形成差异化。 第三，顺应认知，静静地等待属于自己的风口。 一句话理解智猪博弈：成大事者，有所不为才能有所为。 斗鸡博弈斗鸡博弈指两强相争时，最好的结果应该是：其中的一方进，另一方退，双方达成一种不对等的均衡。换句话说，狭路相逢，该勇则勇，该怂就怂。 比如投资圈的人特别喜欢打德州扑克 那么懂得了斗鸡博弈的道理，遇到两强相争之时，具体该怎么做？还是三种方法，我们一起拆解一下 第一，释放信号，展现决心。 不战而屈人之兵 第二，一方妥协，一方补偿 第三，永远考虑机会成本。 一句话理解斗鸡博弈：狭路相逢，该勇则勇，该怂就怂。 枪手博弈正所谓“木秀于林，风必摧之”，在关系错综复杂的多人博弈中，一位参与者最后能否胜出不仅取决于他自身实力的强弱，更重要的是各方实力的对比关系，以及各方的选择策略。 第一，坐山观虎斗 第二，联吴抗曹。 第三，求“包养 一句话理解枪手博弈：懂得避其锋芒，身为草根也终有“逆袭”之日。 第4章 消费者，从来就不是理性的 消费心理（上）心理账户人们会在心里构建分门别类的账户，不同的账户有不同的记账方式和心理运算规则。 我在这里向你介绍心理账户的三种应用方法。 第一，替换概念。 第二，创造收益。 第三，打包项目 一句话理解心理账户：想让消费者买单，你需要给他一个更容易说服自己的理由 损失规避人们面对同样数量的收益和损失时，损失给人的负面影响，比收益给人的正面影响大很多。 了解了损失规避的原理之后，我们如何将它运用到商业策略中？有三种方法，分别是“避免”、“打消”和“放大” 第一，避免损失描述。 第二，打消损失顾虑。 第三，放大损失感受 一句话理解损失规避：同样一件东西，失去的痛苦大于得到的快乐。 路径依赖人类社会中的技术或制度演变具有惯性，人一旦进入一种行为路径，就会对其产生依赖。 怎样做才能让用户在你这里形成路径依赖？ 第一，补贴策略 第二，任务策略 第三，情境策略 益达的广告语是“饭后嚼两粒”，德芙则是说“下雨天和巧克力更配” 一句话理解路径依赖：习惯，我们每个人或多或少都是它的奴隶。 比例偏见参照对象的变化导致比例的不同，而不同的比例会带来不同的感受、行为和态度，这就是我们所说的比例偏见。 “比例有偏见，掏钱莫‘打脸’。” 你应该怎样让消费者买单买得更爽、掏钱掏得更痛快呢？有三招。 第一，放大促销价值。 第二，巧设参照对象。 你觉得这个促销活动够吸引人吗？相比1 000元的商品，50元的赠品只是个小便宜。那聪明的商家应该怎么做呢？它应该告诉你，购买这双鞋的顾客，只要加1元，就能换购一双价值50元的袜子。白送都不一定好用的招数，居然还要收钱？而真实的情况是，愿意加1元换购袜子的人不在少数。这就是比例偏见的神奇作用。免费送袜子，袜子的价值只有鞋子的5%；而加钱换购，1元就能换取50倍的收益。 第三，善用搭配销售 一句话理解比例偏见：比例有偏见，掏钱莫“打脸”。 赌徒谬误人们往往会错误地认为一些事件有内在关联，而事实是，每个事件都是独立的，无论前面的结果如何，都不会对下一次事件产生任何影响。 要想避免落入这个心理陷阱，具体如何做？还是三招 第一，独立判断，客观评价 第二，排除干扰，合理归因。 第三，错就翻倍？除非无限。 一句话理解赌徒谬误：你以为的天命之选，只不过是一厢情愿。 第5章 不但不理性，还会骗自己 消费心理（下）诱饵效应诱饵效应也叫吸引效应或不对称占优效应，是指人们在面临两个难以抉择的选项时，增加一个新选项，也就是诱饵，会让原来的某个选项更具吸引力。 第一，设置次优选项。 第二，干扰占优选项 第三，套餐打包售卖 一句话理解诱饵效应：人与人之间最远的路，就是商家的“套路”。 羊群效应羊群效应也叫从众效应，指的是个人的观念和行为受到群体压力的影响，从而与多数人产生一致行为的现象。 运用羊群效应，引导消费者狂购你的产品，通常有三种方法。 第一，包装成功案例。 第二，凸显用户规模。 第三，引导用户分享。 一句话理解羊群效应：案例，胜过“安利”。 禀赋效应当一个人拥有某项物品或资产的时候，他对该物品或资产的价值评估，要大于尚未拥有这项物品或资产的时候。 了解禀赋效应后，我们如何将其运用到工作和生活中呢？这里有三种应用场景可供你借鉴。 第一，提供免费试用。 第二，兜售亲身参与。 第三，夸赞他人拥有。 一句话理解禀赋效应：“得不到的才是最好的”，这句话可能是世界上最大的谎言。 预期效应人们对事物的判断在很大程度上受主观预期的影响。预期来自已有的认知、他人的评价、权威的意见、公众的舆论等。 第一，品牌塑造更好的预期。 第二，产地构建莫名的预期。 第三，价格锚定效果的预期。 一句话理解预期效应：你看到的，其实是你希望看到的。 锚定效应锚定效应又叫沉锚效应，指的是第一印象或第一信息更容易支配人们的判断，就像沉入海底的锚一样，会把思想固定在某个地方。 那么应该如何运用锚定效应呢？ 第一，产品先定位。 第二，营销先定量。 第三，谈判先开价。 一句话理解锚定效应:最初的瞬间决定最终的结果。 读得懂的互联商业共享经济共享经济，又称作分享经济，是指闲置资源的临时使用权被所有者转让，从而为供给方和需求方同时创造价值。 要想了解共享经济席卷全球的内在逻辑，我们还需要知道以下这三个概念 第一，产消者（prosumer） 第二，U盘化生存 第三，增量价值。 萧伯纳说过：“你有一个苹果，我有一个苹果，彼此交换一下，每个人仍然只有一个苹果。但你有一种思想，我有一种思想，共享一下，我们就都拥有了两种思想。” 一句话理解共享经济：物尽其用，好过仅仅是拥有。[插图] 社群经济一种建立在产品与粉丝群体之间，由信任连接和价值“反哺”共同作用所形成的自组织、自运转、自循环的经济形态。 要想深入了解社群经济，至少有三点你可以记住。 第一，内容：一切产品皆媒体。 就像乔布斯说过的：“好的产品本身，就是最好的营销。” 第二，社群：一切连接皆渠道。 第三，商业：一切参与皆体验。 小米联合创始人黎万强写过一本书，叫作《参与感》，其中提出了参与感“三三法则”，分别是：三个战略（做爆品、做粉丝、做自媒体）；三个战术（开放参与节点、设计互动方式、扩散口碑事件）。 人的商业” 一句话理解社群经济：构筑自己的核心内容，并尽量把连接的成本降为零。 网红经济互联网让“追星”的权利天平发生了倾斜，用户开始有能力自己生产内容，自主消费内容，甚至围绕“网红”形成了一条生机勃发的全新产业链，这就是所谓的网红经济。 网红经济这么火，人人都要当“网红”吗？“网红”是想当就能当的吗？我们来盘点一下。 第一，创业者就要当“网红”？ 第二，怎么当“网红”？ 第三，“网红”怎么赚钱？“ 一句话理解网红经济：使出“洪荒之力”，我为自己代言。 她经济她经济即女性经济，由著名经济学家史清琪女士提出，是指随着女性经济能力和社会地位的提高，围绕女性消费形成的特有的经济现象。 商家如何顺应她经济这种独特的经济形态呢？我总结了三招供你参考 第一，产品端，吸引她的眼球。互联网的世界，真的是一个“看脸的世界 第二，营销端，运用她的思维。 “不在乎天长地久，只在乎曾经拥有 心有眷恋，一花倾念 第三，传播端，撬动她的嘴巴。 一句话理解她经济：你想给她一座城，她却想要一个人。 Baby经济。 Baby经济的市场如此可观，如何从中找到商机呢？还是三招。 第一，从线下到线上 Baby经济Baby经济也叫婴童经济，是指随着婴儿潮的出现而形成的一种经济模式。奶粉、尿布、童装、玩具、早教、亲子游……Baby经济正在形成巨大的产业链。 第二，从单一到多元 第三，从国内到海外。 一句话理解Baby经济：给孩子花的钱，不叫钱。 第7章 5个数字读懂经济大环境 宏观经济GDPGDP指的是一个经济体一年内生产的最终商品和劳务的总价值。粗略地理解起来就是，一个国家的所有人在一年内创造了多少价值。 为了让你更好地理解GDP，我还是带你记住3个数字。 第一，2018年中国人均GDP：6.6万元。 第二，2018年中国GDP增速：6.6%。 第三，中国第三产业占GDP比重：54%。 一句话理解GDP：一个国家的所有人在一年内创造了多少价值。 PICPI也叫居民消费价格指数，由国家统计局负责统计发布。我们买东西、买服务的价格是不断变化的，CPI就是反映这个变化情况的宏观经济指标。 那么普通人怎么应对“通胀”，跑赢CPI呢？至少有以下三种方法。第一，学会投资，提升自己的财商。 第二，投资自己，是永远不会亏本的买卖。老祖宗有一句话：“千金在手，不如一技傍身。” 时刻保持学习精进，成为不可替代的稀缺人才，才是王道 第三，学会消费，把钱有价值地花在当下。 一句话理解CPI：CPI越高，钱就越不值钱。 正在流通的现金叫M0 M1又叫作狭义货币，它反映了经济中的现实购买力，代表消费和终端市场的活跃度。 M2严谨地讲，M2叫作广义货币供应量，你可以把它粗略地等同于央行印钞的数量。 于M2，和你有关联的就是三个数字。第一，183万亿元。 第二，12%。 第三，8%。 一句话理解M2：广义货币，就是央行印钞的数量。 如果请经济学家列出人类面临的最困难的三个问题，那么你听到的回答很可能是：第一，生命的意义是什么？第二，如何统一量子力学和广义相对论？第三，外汇市场到底是怎么回事？ 汇率汇率是一种货币兑换另一种货币的比率，或者说，是以一种货币表示另一种货币的价格。 关于汇率，记住这样三个数字就够了。 第一，6.5。 第二，5万美元。 第三，3万亿美元。 一句话理解汇率：一种货币兑换另一种货币的价格。 利率从本质上说，利率的水平就是金融资本的价格，也就是钱的价格。与普通商品一样，它们都是由市场的供需决定的。 利率有三个概念，对应三个数字，记住这些可能对你有帮助。 第一，名义利率 第二，真实利率 第三，无风险利率。 说到利率，一定要提到爱因斯坦提名的“世界第八大奇迹”——复利。 一句话理解利率的高低是怎么被决定的：钱多了，钱就便宜；钱少了，钱就贵。 第8章 关于互联网，我们只知道一半 互联网思维（上）用户思维，是指在价值链各个环节中都要“以用户为中心”去考虑问题。 互联网思维互联网思维，是指在（移动）互联网、大数据、云计算等科技不断发展的背景下，对市场、用户、产品、企业价值链，乃至整个商业生态进行重新审视的思考方式。 懂得了用户思维的重要性，具体怎么应用？有三大法则。第一，得草根者得天下 第二，兜售参与感。 《100个梦想的赞助商》的视频，这里面的人就是小米的100个“种子用户” 第三，超越预期的用户体验。 一句话理解用户思维：一箭射在膝盖上，让他长跪不起。 凸显核心价值的简约 第一，看起来简洁。 第二，用起来简化。 第三，说起来简单。 一句话理解简约思维：少即是多，用户喜欢你只需要一个理由。 极致思维极致思维体现的是一种匠人精神，就是要把产品和服务做到最好，是从99%到99.99%的坚持。 所谓极致，不等于完美。在践行极致思维时，有三点你需要特别注意。第一，择优求精，而非面面俱到 第二，价值为先，而非一厢情愿。 第三，坚持创新，而非故步自封。 一句话理解极致思维：从99%到99.99%的坚持。 小步快跑，快速迭代——迭代思维—— 迭代思维迭代，在汉语词典里的解释是“更相代替”。说简单点儿，从版本1.01到版本1.02，就是一次迭代。迭代的目标有可能是不确定的，只是为了试探用户的反馈，发现新的市场机会。迭代的周期也是较为随机的，出现问题随时解决，没有问题就优化细节，变换风格，提升用户的新鲜感。 知道了什么叫迭代思维，你又应该如何运用呢？还是三招。 第一，定原型。《 MVP（minimum virable product，即最小可行性产品）。 第二，迈碎步 第三，抢窗口 一句话理解迭代思维：自己选的路，用小碎步快速跑完。 流量思维流量思维是指用多种方式获取大量新用户的思维。经营流量，就像在一个熙熙攘攘的广场上，想办法让尽可能多的人走到你面前。 互联网教父”凯文·凯利有一句很精辟的话：“目光聚集之处，金钱必将追随。” 今天，我们不着重论述流量思维的重要性，更多的还是告诉你如何运用流量思维。具体可以参考三个方面。第一，噱头做得妙。很 第二，广告打得巧 第三，免费玩得呱呱叫 一句话理解流量思维：目光聚集之处，金钱必将追随。 第9章 我们所知道的这一半，都是错的 互联网思维（下）在一个社会化的环境中，每一个人都是节点，他们接收信号，也发出信号。” 六度空间 六度分割理论 最多通过五个中间人，你就能够认识这个世界上的任何一个陌生人。 社会化思维社会化思维，是指组织利用社会化工具、社会化媒体和社会化网络，重塑企业和用户的沟通关系，以及组织管理和商业运作模式的思维方式。 第一，重建用户关系 第二，重构营销思维。 第三，重塑商业模式。 一句话理解社会化思维：用户即媒介，人就是节点。 数据思维传统的数据更多的是数据化运营，也就是在分析已有的数据后进行决策。而大数据思维，本质上是从数据化运营升级为运营数据，也就是有针对性地设置、收集并利用大数据，为商业创造新的价值点。 ，了解大数据有什么用处呢？还是要将其归结为三点。第一，大数据帮你实现创新模式 第二，大数据帮你实现精准营销 第三，大数据帮你实现智能生活 一句话理解大数据思维：从数据化运营到运营数据。 产融思维所谓产融思维，就是一切产业皆可金融。你一定听说过“羊毛出在猪身上”这句话。没错，现如今，很多传统产业本身只作为免费的流量入口，真正的变现方式，或者说产出羊毛的，正是这只叫作“金融”的猪。 那么，产融思维具体可以在哪些方面帮助我们呢？至少有以下三个维度。 第一，降低融资成本 第二，快速跑马圈地。 第三，创新盈利模式。 一句话理解产融思维：拥有多少钱，不重要；能调动多少钱，才重要。 生态思维单拿出来任何一款产品，都不具备舍我其谁的绝对优势，但是当所有的产品构建起一种生态时，则会因为互相之间的协同效应产生巨大的价值壁垒。这也是我们常说的生态思维。 第一，别着急连，先当垂直老大。 要想合纵连横，第一件事是先找到一个足够垂直、不怕小众的缝隙市场，成为绝对的第一。 只有服从大自然，才能战胜大自然”。 第二，横着连，以用户为轴。所 第三，纵着连，以整合为尺。 一句话理解生态思维：只有服从大自然，才能战胜大自然。 跨界思维简单地说，跨界就是别有用心地“不务正业”。比如，星巴克除了卖咖啡，还卖光盘；宜家除了卖家具，还卖肉丸子；宝马除了卖汽车，还卖休闲服装。 理解了什么是跨界思维，又该如何运用跨界思维呢？给你三个建议。 第一，核心能力，要稳。 第二，颠覆方向，要准。 第三，对待自己，要狠。企 贝索斯就说过：“伟大的公司，要学会被人误解。” 一句话理解跨界思维：跨界，就是别有用心地“不务正业”。 第10章 你看赚多少钱，投资人看值多少钱 融资融资融资是指企业通过借钱（举债）、出售所有权（股票），或由获利盈余（留存收益）来筹集所需资本的行为。 我们来分别看一下投融资过程的三个阶段：投资早期、投资中期和投资后期。第一，投资早期，一般指的是“种子轮”和“天使轮”。 第二，投资中期，包括A轮、B轮。 第三，投资后期，主要是C轮、D轮和IPO（Initial Public Offerings，即首次公开募股）。 一句话粗浅地理解投资轮次：“天使轮”看人，A轮看产品，B轮看数据，C轮看收入，上市看利润。 一份优秀的BP通常只需包含12页 第1页是项目概述。这一页需要精练地概括项目，最好只用一句话，越简单越好。第2页是用户的痛点分析。用户有哪些需求场景？行业有哪些痛点？有哪些需求是还没被满足，或者是竞争对手没有解决好的？这个需求市场有多大？这一页的重点是描述市场边界，通俗的说法是描述这个市场的天花板有多高。 商业计划书Business Plan，简称BP，通常是创业者为了对外融资而编写的对公司的画像，包括公司业务、财务状况、市场分析、管理团队等方面的内容。 第3~4页是产品展示页。围绕之前的痛点，你要提供什么样的产品来满足这种市场需求。这部分一般是用几张简单的图片（比如产品截图、业务流程图）描述产品的核心功能，以及产品的开发进度。第5页是竞争分析。同一赛道的竞争对手有哪些？你和他们有什么不同？优势在哪里？有没有可能实现“弯道超车”？这一部分主要是回答投资人关心的“你如何跑赢市场竞争”这个问题。第6~7页是团队介绍。一流的团队可以做好二流的项目，但是二流的团队没办法做好一流的项目。介绍团队不要宽泛地说“技术高超，经验丰富”，这样的描述都是0分，最好的表述是“某某曾经开发一款小软件，帮公司半年内增加100万用户和1 000万元的收入……”用数字说话更有信服力。第8页是里程碑。这一部分主要展示公司从成立到现在的用户数据、收入数据、盈利数据……用已有的运营数据证明你的商业思路可行，流程顺畅，并不是仅有一个想法就来融资了。第9页是发展规划。这款产品做出来以后怎么推广？打算用多长时间达到多少用户量？公司会怎样扩展市场，希望占有多少市场份额？这一步做好以后，下一步会怎么做？这里需要一步一步地展示你公司的长远发展规划。第10~11页也是非常重要的一个部分——融资方案。融资方案有两个核心部分：融资金额和融资用途。首先是你出让多少股份，要多少钱。融资并不是越多越好，你漫天要价就会把投资人吓跑。一般的惯例是，融到足够公司未来18个月所需的资金量就可以了。出让多少股份其实就是估值的问题，怎么估值是一门大学问，我们在之后的章节会专门讲这个主题。然后就是这些钱的用途。再大方的投资人也不会让你拿着钱买豪车、豪宅，环球旅行，而是让你把钱用在刀刃上，优化产品，开发市场。最后一页，也就是第12页，用一句话清晰明了地总结整个项目，给人留下深刻的印象，简约而不简单。 距离优秀的BP还差3件事 第一，自己写，你的公司你做主 第二，慎吹牛，爱用户别爱技术。 第三，说人话，少用文字多用图。 一句话理解怎么做一份好的商业计划书：简约不简单，真诚不做作，理性不吹牛。 路演路演的英文是Roadshow，简单理解就是在路边吆喝。在融资中，站在路边的是创业者，卖的东西就是企业的股权。 第一，讲好故事 第二，霸气外现。 王峰说过：“项目是我的孩子，我每天醒着想，睡着了也想，我怎么可能被投资人问住？” 第三，相信自己 别高看他们”，你可以理解为：战略上藐视对手，战术上重视对手。 一句话理解路演：自信、真诚地讲好故事。 估值估值，顾名思义，就是估算出来的价值。公司估值就是企业在寻求融资的过程中对企业价值的估算。 常用的估值方法有三种：成本法、相对估值法和绝对估值法。 第一，成本法，也就是看过去。 第二，相对估值法，也就是看现在。 第三，绝对估值法，也就是看未来。 永远记住那句话：创业者考虑的是公司赚多少钱，而投资人考虑的永远是公司值多少钱。 一句话理解公司估值：对于估值算法，你要先学会，再忘记。 Term Sheet投资条款清单，简称TS，也被称为投资意向书，是投资者和拟被投资企业就未来的投资交易所达成的原则性约定。 我们来一起简单了解一下3项常见的投融资条款：清算优先权、反稀释条款、股份回购权。 第一，清算优先权。 第二，反稀释条款。 第三，股份回购权 一句话理解融资条款：融资就是博弈，对条款有舍有得，是为真正的帅才。 学得会的品牌传播客户细分客户细分，就是根据客户的属性、行为、需求、偏好，以及价值等因素对客户进行分类，并为其提供有针对性的产品、服务和销售模式。 具体如何来进行准确的客户细分呢？ 第一，统计内在属性 第二，分析外部特征。 第三，识别行为轨迹。 一句话理解客户细分：百人百姓，千人千面。 好店不愁客，好货不愁卖 客户生命周期对企业而言，客户是有生命的，从诞生、成长、成熟、衰老到死亡，商家要想尽可能多地从客户身上捞取油水，就得在不同的阶段，用不同的方法刺激客户。 客户生命周期管理（Customer Life Cycle，简称CLC）。 初始期、成熟期和衰退期 那面对不同阶段的客户，具体怎么管理呢？简单来说，你要做的就是这三件事。 第一，用激素缩短初始期 第二，用多巴胺延长成熟期。 第三，用内啡肽延迟衰退期。 一句话理解客户生命周期：今宵离别后，何日君再来 客户获取客户获取即我们常说的“获客”，一般由公司的市场部负责。在传统商业环境里，获客就是两件事：1.广告，想办法让人“慕名而来”；2.渠道，想办法“近水楼台”，然后“先得月” 第一，理性买。 第二，尽量换。 第三，努力钓。你 好玩的方式增强用户参与感，去“钓取”更多用户。 一句话理解客户获取：要么慕名而来，要么近水楼台 客户终身价值客户终身价值，是指一个客户在他生命周期内一共能贡献多少钱。说白了就是你能从一只“羊”身上薅下来多少“羊毛”。 理解了什么叫客户终身价值，想要做好客户价值转化，你可能需要这三个“锦囊”。 第一，迭代制胜，使商品历久弥新。 第二，需求制胜，商家要得寸进尺 品类交叉引流 第三，品牌制胜，让用户买椟还珠。 一句话理解客户价值转化：对客户，要让他们人尽其“财”。 客户保留客户保留，是指企业为防止客户流失、建立客户忠诚所运用的一整套策略和方法。 客户保留具体来说就是，提升客户忠诚度，降低流失率，实现客户保留。对此，你可以从以下三个方面入手。 第一，培养小依赖。 第二，制造小惊喜。 第三，倾听小牢骚 一句话理解客户保留：让客户生是你的人，死是你的死人。 第12章 多便宜，才算便宜？ 定价策略撇脂定价法在产品生命周期的最早期，制定高价，榨取利润，就像从牛奶中捞取奶皮一样。 在什么条件下可以使用撇脂定价法。 第一，要有用户做“冤大头” “爱她，就带她去吃哈根达斯。 第二，要有技术做“护城河” 第三，要有品牌做“试金石” 一句话理解撇脂定价法：给用户定一个高价，你就可以优先获取“牛奶”里的“精华” 渗透定价法企业在产品投放市场的初期，将价格定得较低，以此来吸引大量顾客，提高市场占有率。 所以使用渗透定价法时需要注意限制条件，我在这里为你总结了三点。 第一，需求弹性大，更该用低价。 第二，边际成本低，才好用低价。 第三，初来乍到时，推荐用低价。 一句话理解渗透定价法：人间自有真情在，能省一块是一块。 阶梯定价法购买一定数量之内，是一种价格；超过一定数量以后，是另一种价格。如果画成图，形状就像阶梯一样。 第一，优惠金额不等比。 第二，上限保持吸引力。 第三，边际成本扛得住。 一句话理解阶梯定价法：别问多少钱，先说买多少。 动态定价法简单地说，动态定价法就是商家对商品或服务的价格进行灵活调整的一种定价策略。这种方法曾被普遍运用到航空业、酒店业。如今，在演出和体育比赛的票务市场，定价也在逐渐走向动态化。 第二，基于用户行为 第三，活用价格歧视。 一句话理解动态定价法：看人下菜，见风使舵。 反向定价法反向定价法，是指由消费者先出价，商家若选择接受，交易就算达成的一种定价方法。 ，反向定价法有什么优点呢？ 第一，价格敏感拽出来。 第二，成交价格藏起来。 第三，交易成本降下来。 一句话理解反向定价法：萝卜白菜，各有所爱；您说几块，就是几块。 第13章 有种资产，叫品牌 品牌管理关于品牌，有个很经典的笑话。有个人爬墙出学校，被校长抓着了。校长问他：“为什么不从校门走？”他说：“美特斯邦威，不走寻常路。”校长追问：“这么高的墙怎么翻过去的啊？”他指了指裤子，说：“李宁，一切皆有可能。”校长又问：“翻墙是什么感觉？”他指了指鞋子，说：“特步，飞一般的感觉。”校长大怒：“我记你大过！”他问：“为什么？”校长淡淡一笑，说：“动感地带，我的地盘我做主！” 品牌资产品牌资产，是指消费者关于品牌的知识和心理事实，是影响消费者感知产品和服务价值的重要因素。 可口可乐前董事长伍德鲁夫有一句名言：“假如我的工厂被大火毁灭，只要有可口可乐的品牌，第二天我又将重新站起。” 第一，建立鲜明的品牌认知。假 第二，形成有力的品牌联想 第三，借助优质的杠杆资源 一句话理解品牌资产：无论是皮囊还是灵魂，所追求的都得是万里挑一。 品牌定位品牌定位就是在客户的心智当中占领一个独特而有价值的位置。说得直白一点儿，就是三个字：你是谁。 第一，宁为鸡头，不当凤尾。 第二，求同存异，借力打力。 第三，不忘初心，方得始终。抢 一句话理解品牌定位：成为第一。如果你不能在这个领域争得第一，那就寻找一个你可以成为第一的领域。 品牌组合一家公司在同一品类里开发多个品牌，分别进入不同的细分市场，从而让整体的市场覆盖率更高。这种品牌管理的方式叫作品牌组合。 说到洗发水品牌，你可能听说过飘柔、潘婷、海飞丝、伊卡璐和沙宣，但你知道它们都属于宝洁吗？飘柔主打“柔顺优雅”；潘婷主打“修护滋养”；海飞丝主打“清爽去屑”；伊卡璐主打“草本天然”；沙宣主打“专业时尚”。5个品牌各显神通，让宝洁占据了国内洗发水数百亿元市场的半壁江山。 品牌组合已经是一种非常成熟的品牌管理方法 第一，借助高端品牌，建立价值优势。 第二，利用低端品牌，形成侧翼保护。 第三，看清交叉范围，避免自相残杀。 一句话理解品牌组合：三个臭皮匠，顶个诸葛亮。 品牌延伸品牌延伸，是指企业利用现有品牌进入新的产品类别，推出新产品的做法，本质上是借助已有的品牌信誉和市场影响力为新产品线赋能。 理解了品牌延伸的特点，我们在具体运用的时候，还需要注意以下三个方面 第一，贪多嚼不烂。 第二，树大好乘凉。 第三，“女大不中留”。 一句话理解品牌延伸：一根藤上七朵花，一个葫芦七个娃。 品牌激活品牌激活就是扭转品牌的衰退趋势，重获消费者青睐的一种品牌管理行为。 寒冰不能断流水，枯木也会再逢春。 关于品牌激活，具体的使用技巧还是三个。 第一，新陈代谢，开启年轻化 第二，倚老卖老，主打复古风。 第三，该放就放，有舍才有得 一句话理解品牌激活：寒冰不能断流水，枯木也会再逢春。 第14章 一件事儿，到底该怎么说？ 媒介管理整合营销传播整合营销传播（Integ-rated Marketing Communication），简称IMC。1992年，美国西北大学[插图]教授唐·舒尔茨提出了IMC的理论框架。舒尔茨教授认为，品牌在消费者心里发挥作用的过程，不只是心智占有，还是一种体验的累积。 那么具体如何做整合营销传播呢？我给你三条建议。 第一，上下要统筹 第二，左右要配合。 第三，前后要协调。已 一句话理解整合营销传播：One world，one voice.（同一个世界，同一种声音。) 你可以怎么做精准定向传播呢 第一，搜索引擎营销。 第二，程序化购买 第三，智能算法。 一句话理解精准定向传播:指哪儿打哪儿，打哪儿指哪儿。 意见领袖传播 KOL一声吼，行业抖三抖 意见领袖意见领袖又叫舆论领袖，最早在20世纪40年代由美国哥伦比亚大学的传播学者保罗·拉扎斯费尔德提出。保罗认为：对于媒介所传播的信息，有一部分人会积极接受，并再度传播，扩大影响，这些人就是意见领袖。 怎么做KOL传播呢？ 第一，圈层专业，领域深耕。 第二，潜移默化，润物无声。 第三，量的积累，质的飞跃。 一句话理解意见领袖传播：射人先射马，擒贼先擒王。 公关公关（PR）是公共关系（Public Relations）的简称，指的是企业和公众群体之间的关系。但凡是关系，都需要经营维护，公关就是企业先经营好与公众的关系，再通过公众群体所形成的口碑、舆论、正面印象，间接地影响终端消费者。 那么想要做好公共关系，应该如何操作呢？简单来说，还是三件事儿。 第一，携手媒体记者，搞事情 第二，担负社会责任，做公益。 第三，应对舆论危机，“擦屁股” 一句话理解公共关系：大家觉得好，才是真的好。 创意为王好的创意，自带流量。 人头马一开，好事自然来”[插图]，“钻石恒久远，一颗永流传” “广告教父”大卫·奥格威提出过一个特别简单但是绝对好用的广告创意法则：3B原则。3B是Baby、Beauty、Beast这3个单词的缩写，也就是说，出现小孩、美女和小动物的广告片，最能吸引人。 我在这里总结了三个新的创意方向，代表互联网广告的当下和未来。 第一，在内容里交织渗透。 第二，在媒介上耳目一新。 第三，在互动中花样百出。 一句话理解创意：好的创意，能把强迫用户看的广告，变成用户追着看的内容。 第15章 谈判，是“舍”与“得”的艺术 谈判BATNABATNA是由罗杰·费舍尔和威廉·尤里在1981年提出的谈判思维，是指假如当前的谈判破裂，你找别人合作能够拿到的最好条件。 第一，骑驴找马，优化你的BATNA。中 第二，步步为营，探出对方的BATNA。 第三，釜底抽薪，削弱对方的BATNA。 一句话理解BATNA：谈判之前，先找“备胎”。 开局策略谁能掌握更全面、更充分的信息，谁就能在谈判中享有巨大的优势。 除了知己知彼，还有哪些技巧，能够帮你形成一个对自己有利的开局呢？ 第一，狮子大开口。 第二，吃惊大开口 第三，假装大开口。一 一句话理解谈判的开局策略：知己知彼，做足功课。 让步策略谈判是一门妥协的艺术，它的本质应该是利益交换，谈判者不仅要得到自己想要的，还要适当让出对方想要的。 让步的重要性无须多言，我们更应该聚焦在如何运用让步策略上 第一，索取回报趁当前。 第二，让步幅度要递减 第三，折中让步要避免。 一句话理解让步策略：谈判里真正的赢，是双赢。 终局策略从心理学角度来解释，人在经历过恐惧之后，都特别渴望被安慰。“黑脸白脸”就是利用了人在情绪的快速转移过程中，心理会放松戒备这样一个弱点。 你可能会问，如果身边的人都很友善，没有一个会扮黑脸的，该怎么用这一招呢？很简单，你可以虚构一位上级领导，让他来扮演黑脸。 黑脸白脸战术的威力如此之大，万一对方用起来，你怎么办呢？有三种方法是我们可以尝试的。当我们学会拆解对方的黑脸白脸战术，自然也就可以把自己的黑脸白脸唱得更得心应手了。 第一，让装睡的白脸自我觉醒。 第二，跟脸皮薄的白脸统一战线。 第三，对强硬的黑脸施阴柔术。 一句话理解谈判的黑脸白脸战术：恩威并济，软硬兼施 一是地尽其利的能力。 二是要具备不失时机的能力。 谈判软技能商业的世界就是弱肉强食，要么店大压客，要么客大压店，这个观点我不止一次说过。那么，到底什么决定着你的大小呢？德州扑克这个游戏背后的逻辑，跟商业谈判有着惊人的相似点。在德州扑克中，你的筹码量比你拿到的牌更重要。谈判技巧决定你拿什么牌，你的筹码量还是决定于你自身的实力：你有多少用户，你有什么技术，你有什么核心竞争力是人无我有、人有我优的，你的团队凝聚着怎样的精神力和意志力，等等。 最厉害的谈判高手体现在能够化腐朽为神奇，把别人谈不成的生意谈成。这种“破局而生”的能力最为难能可贵。那么如何应对谈判场上的僵局和困境呢？有以下三种方法。 第一，临阵换将，发起持久战。 第二，按下暂停，让宾主尽欢。 局”的本意是棋盘，因此饭局就是在餐桌上的博弈。能够吃好喝好，宾主尽欢了，再谈正事，就能变得顺畅许多。 第三，共同利益，尽量一边坐。 一句话理解谈判软技能：破局而生，化腐朽为神奇。 做得到的自我迭代一万小时定律人们眼中的天才之所以卓越非凡，并非天资超人一等，而是付出了持续不断的努力。一万小时的锤炼是任何人从平凡变成世界级大师的必要条件。——格拉德威尔，《异类》 如果你认为“只要练一万个小时，就一定能成为专家”，那就大错特错了。 关于坚持，我给你三个建议 第一，带着目的学。 第二，带着喜欢学 第三，带着环境学。 一句话理解一万小时定律：以5年、10年为人生刻度，规划自己的职业生涯。 刻意练习杰出并不是一种天赋，而是人人都可以学会的技巧，这个技巧就是刻意练习。 第一，走出既有误区。 第二，建立心理表征 有人说，凡事都有三个阶段：第一个阶段，看山是山，看水是水；第二个阶段，看山不是山，看水不是水；第三个阶段，看山还是山，看水还是水。 第三，循环3个F。 方法就是循环3个F：第一个F是专注（Focus），在整个刻意练习的过程中，要带着明确的目的，注意力要高度集中，行为高度专注；第二个F是反馈（Feedback），在专注练习的过程中，要不断地主动获取外界的反馈；第三个F是修正（Fix）。任何刻意练习，都遵循这样一种简单的逻辑：1.取得进步；2.遭遇瓶颈；3.克服障碍；4.稳定提高；5.直到下一个障碍出现 一句话理解刻意练习：杰出不是一种天赋，而是人人都可以学会的技巧。 批判性思维批判性思维与海绵式思维的全盘接收不同，前者讲求的是在吸收信息的过程中，要质疑、分析、评价、反思。 有一段总结批判性思维的话，我觉得挺有意思，分享给你：怀疑，但不否定一切；开放，但不摇摆不定；分析，但不吹毛求疵；决断，但不顽固不化；评价，但不恶意揣测；有力，但不偏执自负。那么，要想具备批判性思维，到底该怎么做呢？我分享三个技巧给你。 第一，避免归因偏差。 第二，识破推理谬误。 第三，细听弦外之音 一句话理解批判性思维：对思考过程的“再思考” 图形化思维图形化思维就是用图形的组合，把我们接收的信息和我们的想法直观地呈现出来。 那么，图形化思维具体怎么用呢？还是三种方法。 第一，掌握基本模型。 第二，了解视觉规范。 第三，争取一气呵成。 一句话理解图形化思维：用简单的图形，演绎复杂的思考。 学习金字塔”从阅读、听课、运用多媒体到现场观摩、互动讨论，再到最后教别人，这个学习效果不断提升的过程，实际上是一个从“自己学”到“大家一起学”，从“被动学习”到“主动学习”的转化过程。 那具体来说，怎么运用“学习金字塔”提升自己的学习效率呢？我觉得有三种方法。 第一，复合感官。 第二，知行合一。 第三，教学相长 学员听课有两个结果，一是觉得这个老师好厉害，二是自己真的变厉害了。 一句话理解“学习金字塔”：从自己学到一起学；从被动学到主动学。 第17章 沟通就是好好说话？太傻太天真 沟通管理有一个著名的“沟通漏斗”理论：你心里想的是100%，嘴上能说出来的是80%，别人能听到60%，听懂40%，而最后付诸行动的只有20% 人际沟通划分为四个区：公开区、盲目区、隐蔽区、未知区。 乔哈里视窗乔哈里视窗是美国学者乔瑟夫和哈里共同提出的一个理论，它也被称为“自我意识的发现-反馈模型”。它把人际沟通比作一扇窗，将其分为四个区域：公开区、隐蔽区、盲目区和未知区。 第一，请教与反馈。 第二，自我暴露。 ，曾经有人告诉我交朋友最好的方法，就是告诉对方你的一个小秘密。 第三，共享发现。尝 一句话理解乔哈里视窗：你说的和别人听到的，很可能并不一样。 关键对话可以总结为三句话：意见不统一，气氛特紧张，结果风险大。 第一，从“心”开始，明确目标。 第二，营造氛围，避免冲突。 第三，主动耐心，化解沉默。 一句话理解什么是关键对话：意见不统一，气氛特紧张，结果风险大。 良言一句三冬暖，恶语伤人六月寒。” 暴力沟通分类 1.道德评判 2.做比较 3.强人所难 运用非暴力沟通，有以下三个关键步骤，我给你分别拆解一下 第一，提出陈述，不做评论 非暴力沟通非暴力沟通是用相互尊重、理解和包容的态度来完成对话的方式。用该理论的提出者——马歇尔·卢森堡博士的话来说，就是“情意相通，和谐相处”。 第二，表达感受，不加想法 第三，明确需求，不要含糊。 一句话理解非暴力沟通：良言一句三冬暖，恶语伤人六月寒。 等到30多岁，我才渐渐明白一个道理：沟通时，你说了什么不重要，怎么说的才重要。 通分解成三个部分，即语言内容、眼神手势、语速语调 信息传递=55%视觉+ 38%声音+ 7%语义 非语言沟通非语言沟通就是指沟通过程中利用身体动作、体态、语气、语调、语速，甚至穿着、空间距离等，传递和交流信息。 语言沟通的技巧有很多，我们在这里只谈最重要的三点。 第一，眼神：心灵的小窗户 第二，声音：情感的小象征。 第三，动作：内心的小表达。几 一句话理解非语言沟通：说了什么不重要，怎么说的才重要。 《高效演讲》 送礼物心态不要极力取悦那些不那么在乎你演讲的人，把心态调整成“我来送礼，喜不喜欢随你”这种感觉，紧张感自然就会缓解。 第一，七秒开场。 第二，“三事法则” 第三，“你”和“我们”。 一句话理解公众演讲：我来送礼，喜不喜欢随你。 第18章 让别人做你想让Ta做的事 职场沟通让别人做你想让Ta做的事 汇报谁经常向我汇报工作，谁就在努力工作；谁不经常汇报工作，谁就没有努力工作。——马克·麦考梅克，《哈佛学不到的经营策略》 这样重要的职场沟通技巧，如何才能用好？我给你三个建议。 第一，永远提供选择题 哈佛商业评论》杂志发表过一篇文章，叫《谁背上了猴子》 优秀的员工在汇报之前会准备3套方案：最可行的、最大胆的和最保守的，并提前衡量每个方案的利弊。 汇报的时候可以这么说：“我们有三个方案可以选，A方案是……优点是……缺点是……；B方案是……优点是……缺点是；C方案是……优点是……缺点是……我感觉A方案最可行，您看呢？” 第二，先说结论少闲扯。 “电梯测验”，做销售的人一般都经历过这种训练。就是要求你在等电梯的短短30秒里，清晰、准确地向客户说明白你的方案。 第三，拿捏时机才好办。 公司里讲求分工协作，一个细节变动，就可能“牵一发而动全身”，影响很多部门，所以汇报一定要及时。 一句话理解职场沟通：在对的时间，用对的方法，提高职场“能见度”。 马爸爸”的协调智慧 那马云是怎么做的呢？他先打电话给金庸，说了一番自己的雄心壮志，诚心诚意请他来当评委，没想到金庸爽快地答应了。然后，马云又打电话给网易和新浪的老大，这两个人都是金庸迷，一听说金庸要来，都马上点头说来。最后，马云打电话给搜狐老大张朝阳，张朝阳虽然不是金庸迷，但是听说网易和新浪的人都来，自己也不能落下，就一起出席了“西湖论剑”。 在职场中，一个人的协调能力如何，会直接反映在他的工作进展上 协调力协调力包括三种综合能力：确保整体平衡发展的“调整力”，在人与人之间起联系作用的“中介力”，以及向成功方向引导的“推进力”。——大久保幸夫，《12个工作的基本》 特别是在职场上协调资源的时候，别人为什么要听从于你呢？这也是最难的部分。 第一，花言巧语，把对方架上去。 比如，你在面对客户时可以说：“您在这行可比我有经验多了，这个方案的好处您肯定比我更明白。”你在面对同事时可以说：“总听老板讲，你是公司里最专业的，还特别有耐心，人特别好，我就厚着脸皮来了。” 第二，互换立场，从对方角度想。 “我们希望帮路总扩大一下商学课的影响力，所以想请您来做一场演讲。您把课程的二维码发给我，我在线上线下都做一些推广。” 第三，借用背书，让资源浪打浪。 我最看重你，所以第一个跟你说。 一句话理解协调：要想齐心协力，不能光靠默契。 拒绝一味地顺从，会失去自我。一味地拒绝，会失去朋友。就人生而言，一方面应该懂得有容乃大，另一方面也应该明晓不能是来者不拒。——汪国真，《拒绝》 以下这三种人的请求，我一定尽全力满足：1.真心帮助过我；2.真正关心过我；3.真的在乎我的时间。除此之外，不管是谁，一律说“不”。 以让你在拒绝别人的同时不伤情面。 第一，推却得留有余地。 第二，回绝得有理有据。 有一次，他的一位好朋友向他打听海军在一个小岛上建立潜艇基地的计划。罗斯福神秘地向四周看了看，压低声音问道：“你能保密吗？”朋友说：“当然能！”罗斯福微笑着说：“那么，我也能。” 第三，能不能之后再议。 事缓则圆。” 一句话理解拒绝：一味地拒绝，会失去朋友；一味地顺从，会失去自我。 争取“会哭的孩子有奶吃”这句话的确不错，但我们一直都理解错了。这个“会哭”，不是跟压根不哭相比，而是与“瞎哭”“乱哭”区别开来。聪明人知道在什么时候哭，该怎么哭。 非常规加薪”，具体该怎么做呢？还是三个建议。 第一，天时——看势头选时机。 第二，地利——用稀缺说价值。 第三，人和——用责任换利益。 一句话理解职场利益的争取：知道什么时候哭、怎么哭的孩子，有奶吃。 一是套话。 二是空话，就是说出口却兑现不了的话。 三是假话。 场沟通禁忌在职场，攻城略地要靠能力、靠付出、靠真本事。同时，为了防守，我们也要懂得基本的职场规则，否则进一步退三步，非智者所为。 四是真话。 还有以下三种情况，你得格外小心。 第一，不顾汇报关系。 第二，不看人前人后。 一直信奉一条处世之道：说别人好，要背着人说；说别人的不是，一定要当人面说。 第三，不分角色场合。 同事之间的关系就像刺猬：离得太远，彼此之间缺少温暖；挨得过近，难免就会伤到对方。 一句话理解职场沟通的禁忌：有些话，不该说，就别说。 第19章 你和比尔·盖茨，都只有24个小时 时间管理有这样一个实验。一位教授带着一个玻璃罐走进教室，他先在罐子里放入一堆高尔夫球，问学生：“这个罐子满了吗？”学生们回答：“满了。”教授倒入一杯小石子，填满了高尔夫球之间的空隙，然后问道：“满了吗？”学生们回答：“满了。”教授又倒入一杯沙子，将石子间的缝隙填得满满的，并问道：“满了吗？”学生们很无奈地答道：“这回肯定满了。”教授微微一笑，又拿出了一瓶啤酒。“现在你们把这个罐子想象成自己的人生，高尔夫球代表重要的东西，包括家人、朋友、健康、爱情；小石子代表一般重要的事情，比如工作、房子、车子；沙子代表不重要的小事。如果你先把沙子倒进去，会怎么样呢？你就没有空间放高尔夫球和小石子了。先放入高尔夫球，也就是真正重要的事，然后再放入小石子、沙子，就容易得多。”教授说道。“那啤酒代表什么呢？”有个学生问道。教授大笑着说：“它代表无论你的生活过得多么紧凑，你仍然有时间和朋友们喝几杯。 时间四象限法 时间管理如果你把所有的时间和精力都消耗在琐事上，那就不会有时间去做真正重要的事。 第一，不重要也不紧急的事，少做。 第二，紧急不重要的事，快做。 第三，重要不紧急的事，早做。 一句话理解时间四象限：大事早做，从容不迫。 拖延症的危害拖延行为会产生许多负面的结果：从外在看，也许是损失金钱、损失信用；从内在看，你会变得自责、焦虑、消极、倦怠，在“拖延怪圈”中苦苦挣扎。 那么，如何预防和治疗拖延症呢？有三个小技巧。 第一，拆分任务时间。 WBS（Work Breakdown Structure，工作分解结构）。 第二，用好碎片时间。 第三，找到最佳时间。 一句话理解拖延症：明日复明日，明日何其多。 心 流心流是指在做某些事情时，那种全神贯注、投入的、忘我的状态。 第一，物理屏蔽法。 第二，番茄工作法 第三，Deadline倒逼法。 我团队里的一个小伙伴在准备婚礼的时候，做了一张超大的“甘特图”，九大模块，共计80个小项目，按照婚礼时间倒推，标注好每个项目的完成时间，自己驱动自己，按计划完成。最终在几乎没有请假也没有花钱请专人策划的情况下，办了一场所有人都点赞的定制化婚礼。 一句话理解抵抗干扰：俯首埋头，进入心流。 ABC原理 A”代表事件本身，“B”代表你对这件事的看法，“C”是这件事带来的结果 压力管理让我们心理上受苦的不是事情本身，而是我们对事件的想法和围绕这个事件所编造的“故事”。——张德芬，《遇见未知的自己》 人的欲望是世界上最难填满的沟壑，只要有欲望，就会有压力。 除了心理的“按摩”，还有什么具体的方法可以帮助我们管理压力呢？我在这里还是提供三种小方法 第一，给自己“洗个脑” GTD工作法”（Getting Things Done，把事情搞定）。它的核心理念就是4个字：清空大脑。 第二，给自己扫个除 第三，给自己放个假。 一句话理解压力管理：尽人事，听天命。 精力管理管理精力，而非时间，才是高效表现的基础。——吉姆·洛尔、托尼·施瓦茨，《精力管理》 该干活就干活，该玩就玩，该休息就休息 如何让自己进入“高–正面”象限，保持全情投入呢？我想给你三点建议。 第一，做到张弛有度。 第二，突破惯常极限。 第三，养成仪式习惯。 一句话理解精力管理：该干活就干活，该玩就玩。 第20章 成为一个什么样的人，取决于你自己 职业生涯规划那到底什么是好工作呢？我们来看看关于好工作，通常会遇到的三个问题。 1.大公司真的好吗？ 大公司的成功缘于公司的资源和体系 不是你成就了乔家的生意，而是乔家的生意成就了你。 2.外企真的好吗？ 3.国外真的好吗？ 要先弄清楚你想要什么。如果你不清楚自己想要什么，你就永远也不会找到所谓的好工作。因为你永远只能看到你得不到的东西，而你得到的，都不是你想要的。 一句话想清楚什么是好工作：问问自己，你真的知道自己想要的是什么吗？ 跳槽之前，我建议大家注意三点 工作需要你理性对待。 在90%的情况下，你的公司并没有那么“烂”。 有些问题是躲不开的。 只是不要因为盲目和躲避而跳槽。对此，我想给你三个建议。 第一，不要重蹈覆辙。 第二，积累好再跳。 第三，年轻人敢闯就换。 记得有一位猎头朋友说过这样一句话：“如果你35岁还在通过招聘网站投简历，没有猎头一天到晚骚扰你的话，你就该反省一下，自己到底是哪里做错了。”这句话，你觉得有道理吗？ 一句话想清楚跳槽与积累：在这家公司解决不了的问题，在下一家公司真的能解决吗？ 那么，如何客观地评判一个行业是否够好，是否适合自己呢？我认为有三个标准。 第一，不可逆转的趋势。 第二，不可复制的天赋。 第三，不可替代的稀缺。 好的领导，不是让你钱多、事少、离家近，而是至少具备以下三个特点。 第一，宽广的心胸 第二，从下属角度思考问题。 第三，敢于承担责任。 一句话帮我们看清什么是好行业：入对行，跟对人，成功只是时间问题。 董卿在《朗读者》这个节目上，有过这样一段关于选择的朗读，我很喜欢，把它分享给你。生存还是毁灭，这是一个永恒的选择题，以至于到最后我们成为什么样的人，可能不在于我们的能力，而在于我们的选择。选择无处不在：面朝大海，春暖花开是海子的选择；人不是生来被打败的，是海明威的选择；人固有一死，或重于泰山，或轻于鸿毛，是司马迁的选择。选择是一次又一次自我重塑的过程，让我们不断地成长，不断地完善。如果说人生是一次不断选择的旅程，那么当千帆阅尽，最终留下的就是一片属于自己的独一无二的风景。 我认为有三个问题是你需要想清楚的。 第一，什么叫选择？ 第二，什么是更重要的选择？ 你选择相信什么？你选择和谁交朋友？你选择做什么？你选择怎么做？在这些选择当中，意识形态层面的选择又远比客观条件的选择重要：比如选择做什么产品其实并不那么重要，而选择怎么做才重要；选择用什么人并没有那么重要，而选择怎么用这些人才重要。 第三，什么是比选择更重要的？ 一句话理解选择：你最终会成为什么样的人，就决定在你的每个选择之间。 逆境，是上帝帮你淘汰竞争者的地方——等待—— 要知道，你不好受，别人也不好受，你坚持不下去了，别人也一样。千万不要告诉别人你坚持不住了，那只能让别人获得坚持的信心。让竞争者看着你微笑的面孔，失去信心，退出比赛。胜利终将属于那些有耐心的人。 一句话理解等待：不要告诉别人你坚持不住了，那只能让别人获得坚持的信心。","tags":[{"name":"商学","slug":"商学","permalink":"https://lywlefan.github.io/tags/商学/"},{"name":"常识","slug":"常识","permalink":"https://lywlefan.github.io/tags/常识/"}]},{"title":"微服务架构的理论基础 - 康威定律","date":"2019-06-04T16:00:00.000Z","path":"2019/06/05/指导思想/java/微服务架构的理论基础 - 康威定律/","text":"概述&emsp;&emsp;关于微服务的介绍，可以参考微服务那点事。 &emsp;&emsp;微服务是最近非常火热的新概念，大家都在追，也都觉得很对，但是似乎没有很充足的理论基础说明这是正确的，给人的感觉是 不明觉厉 。前段时间看了Mike Amundsen 《远距离条件下的康威定律——分布式世界中实现团队构建》（是Design RESTful API的作者）在InfoQ上的一个分享，觉得很有帮助，结合自己的一些思考，整理了该演讲的内容。 &emsp;&emsp;可能出乎很多人意料之外的一个事实是，微服务很多核心理念其实在半个世纪前的一篇文章中就被阐述过了，而且这篇文章中的很多论点在软件开发飞速发展的这半个世纪中竟然一再被验证，这就是康威定律（Conway’s Law）。 &emsp;&emsp;在康威的这篇文章中，最有名的一句话就是： Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations. - Melvin Conway(1967) &emsp;&emsp;中文直译大概的意思就是：设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。看看下面的图片（来源于互联网，侵删），再想想Apple的产品、微软的产品设计，就能形象生动的理解这句话。 &emsp;&emsp;用通俗的说法就是：组织形式等同系统设计。 &emsp;&emsp;这里的系统按原作者的意思并不局限于软件系统。据说这篇文章最初投的哈佛商业评论，结果程序员屌丝的文章不入商业人士的法眼，无情被拒，康威就投到了一个编程相关的杂志，所以被误解为是针对软件开发的。最初这篇文章显然不敢自称定律（law），只是描述了作者自己的发现和总结。后来，在Brooks Law著名的人月神话中，引用这个论点，并将其“吹捧”成了现在我们熟知“康威定律”。 康威定律详细介绍&emsp;&emsp;Mike从他的角度归纳这篇论文中的其他一些核心观点，如下： 第一定律：Communication dictates design（组织沟通方式会通过系统设计表达出来） 第二定律：There is never enough time to do something right, but there is always enough time to do it over（时间再多一件事情也不可能做的完美，但总有时间做完一件事情） 第三定律：There is a homomorphism from the linear graph of a system to the linear graph of its design organization（线型系统和线型组织架构间有潜在的异质同态特性） 第四定律： The structures of large systems tend to disintegrate during development, qualitatively more so than with small systems（大的系统组织总是比小系统更倾向于分解） 一.人是复杂社会动物&emsp;&emsp;第一定律：Communication dictates design（组织沟通方式会通过系统设计表达出来） &emsp;&emsp;组织的沟通和系统设计之间的紧密联系，在很多别的领域有类似的阐述。对于复杂的系统，聊设计就离不开聊人与人的沟通，解决好人与人的沟通问题，才能有一个好的系统设计。相信几乎每个程序员都读过的《人月神话》（1975年，感觉都是老古董了，经典的就是经得起时间考验）里面许多观点都和这句话有异曲同工之妙。 &emsp;&emsp;比如《人月神话》中最著名的一句话就是 Adding manpower to a late software project makes it later –Fred Brooks, (1975) &emsp;&emsp;Boss们都听到了吗？为了赶进度加程序员就像用水去灭油锅里的火一样（无奈大家还是前赴后继）。 &emsp;&emsp;为什么？人月神话也给出了很简洁的答案：沟通成本 = n(n-1)/2，沟通成本随着项目或者组织的人员增加呈指数级增长。是的，项目管理这个算法的复杂度是O(n^2)。举个例子 5个人的项目组，需要沟通的渠道是 5*(5–1)/2 = 10 15个人的项目组，需要沟通的渠道是15*(15–1)/2 = 105 50个人的项目组，需要沟通的渠道是50*(50–1)/2 = 1,225 150个人的项目组，需要沟通的渠道是150*(150–1)/2 = 11,175 &emsp;&emsp;所以知道为什么互联网创业公司都这么小了吧，必须小啊，不然等CEO和所有人讲一遍创业的想法后，风投的钱都烧完了。 &emsp;&emsp;Mike还举了一个非常有意思的理论，叫“Dunbar Number”，这是一个叫Dunbar（废话）生物学家在1992年最早提出来的。最初，他发现灵长类的大脑容量和其对应的族群大小有一定关联，进而推断出人类的大脑能维系的关系的一些有趣估计。举例来说 亲密（intimate）朋友: 5 信任（trusted）朋友: 15 酒肉（close）朋友: 35 照面（casual）朋友: 150 &emsp;&emsp;是不是和上面的沟通成本的数字很貌似有关联？是的，我们的大脑智力只能支持我们维系这么多的关系。（大家都知道这不是程序猿擅长的领域，在开发团队里，这个值应该更小，估计和猿差不多 -_-凸 ） &emsp;&emsp;沟通的问题，会带来系统设计的问题，进而影响整个系统的开发效率和最终产品结果。 二.一口气吃不成胖子，先搞定能搞定的&emsp;&emsp;第二定律：There is never enough time to do something right, but there is always enough time to do it over（时间再多一件事情也不可能做的完美，但总有时间做完一件事情） Eric Hollnagel是敏捷开发社区的泰斗之一，在他《Efficiency-Effectiveness Trade Offs》 一书中解释了类似的论点。 &emsp;&emsp;系统越做越复杂，功能越来越多，外部市场的竞争越来越剧烈，投资人的期待越来越高。但人的智力是有上限的，即使再牛逼的人，融到钱再多也不一定招到足够多合适的人。对于一个巨复杂的系统，我们永远无法考虑周全。Eric认为，这个时候最好的解决办法竟然是——“破罐子破摔”。 &emsp;&emsp;其实我们在日常开发中也经常碰到。产品经理的需求太复杂了？适当忽略一些细节，先抓主线。产品经理的需求太多了？放弃一些功能。 &emsp;&emsp;据说Eric被一家航空公司请去做安全咨询顾问，复杂保证飞机飞行系统的稳定性和安全性。Eric认为做到安全有两种方式： 常规的安全指的是尽可能多的发现并消除错误的部分，达到绝对安全，这是理想。 另一种则是弹性安全，即使发生错误，只要及时恢复，也能正常工作，这是现实。 &emsp;&emsp;对于飞机这样的复杂系统，再牛逼的人也无法考虑到漏洞的方方面面，所以Eric建议放弃打造完美系统的想法，而是通过不断的试飞，发现问题，确保问题发生时，系统能自动复原即可，而不追求飞行系统的绝对正确和安全。 &emsp;&emsp;下面的图很好的解释了这个过程： &emsp;&emsp;听着很耳熟不是吗？这不就是 持续集成 和敏捷开发吗？的确就是。 &emsp;&emsp;另一方面，这和互联网公司维护的分布式系统的弹性设计也是一个道理。对于一个分布式系统，我们几乎永远不可能找到并修复所有的bug，单元测试覆盖1000%也没有用，错误流淌在分布式系统的血液里。解决方法不是消灭这些问题，而是容忍这些问题，在问题发生时，能自动回复，微服务组成的系统，每一个微服务都可能挂掉，这是常态，我们只有有足够的冗余和备份即可。即所谓的 弹性设计（Resilience） 或者叫高可用设计（High Availability）。 三.种瓜得瓜，做独立自治的字系统减少沟通成本&emsp;&emsp;第三定律：There is a homomorphism from the linear graph of a system to the linear graph of its design organization（线型系统和线型组织架构间有潜在的异质同态特性） &emsp;&emsp;这是康威第一定律组织和设计间内在关系的一个具体应用。更直白的说，你想要什么样的系统，就搭建什么样的团队。如果你的团队分成前端团队，Java后台开发团队，DBA团队，运维团队，你的系统就会长成下面的样子： &emsp;&emsp;相反，如果你的系统是按照业务边界划分的，大家按照一个业务目标去把自己的模块做出小系统，小产品的话，你的大系统就会长成下面的样子，即微服务的架构 &emsp;&emsp;微服务的理念团队间应该是 inter-operate, not integrate 。inter-operate是定义好系统的边界和接口，在一个团队内全栈，让团队自治，原因就是因为如果团队按照这样的方式组建，将沟通的成本维持在系统内部，每个子系统就会更加内聚，彼此的依赖耦合能变弱，跨系统的沟通成本也就能降低。 四.合久必分，分而治之&emsp;&emsp;第四定律： The structures of large systems tend to disintegrate during development, qualitatively more so than with small systems（大的系统组织总是比小系统更倾向于分解） &emsp;&emsp;前面说了，人是复杂的社会动物，人与人的通过非常复杂。但是当我们面对复杂系统时，又往往只能通过增加人力来解决。这时，我们的组织一般是如何解决这个沟通问题的呢？Divide and conquer,分而治之。大家看看自己的公司的组织，是不是一个一线经理一般都是管理15个人以下的？二线经理再管理更少的一线？三线再管理更少的，以此类推。（这里完全没有暗示开发经理比程序猿更难管理） &emsp;&emsp;所以，一个大的组织因为沟通成本/管理问题，总为被拆分成一个个小团队。 创业的想法太好了，反正风投钱多，多招点程序猿 人多管不过来啊，找几个经理帮我管，我管经理 最后， 康威定律 告诉我们组织沟通的方式会在系统设计上有所表达，每个经理都被赋予一定的职责去做大系统的某一小部分，他们和大系统便有了沟通的边界，所以大的系统也会因此被拆分成一个个小团队负责的小系统（微服务是一种好的模式） 康威定律如何解释微服务的合理性&emsp;&emsp;了解了康威定律是什么，再来看看他如何在半个世纪前就奠定了微服务架构的理论基础。 人与人的沟通是非常复杂的，一个人的沟通精力是有限的，所以当问题太复杂需要很多人解决的时候，我们需要做拆分组织来达成对沟通效率的管理 组织内人与人的沟通方式决定了他们参与的系统设计，管理者可以通过不同的拆分方式带来不同的团队间沟通方式，从而影响系统设计 如果子系统是内聚的，和外部的沟通边界是明确的，能降低沟通成本，对应的设计也会更合理高效 复杂的系统需要通过容错弹性的方式持续优化，不要指望一个大而全的设计或架构，好的架构和设计都是慢慢迭代出来的 &emsp;&emsp;带来的具体的实践建议是： 我们要用一切手段提升沟通效率，比如slack，github，wiki。能2个人讲清楚的事情，就不要拉更多人，每个人每个系统都有明确的分工，出了问题知道马上找谁，避免踢皮球的问题。 通过MVP的方式来设计系统，通过不断的迭代来验证优化，系统应该是弹性设计的。 你想要什么样的系统设计，就架构什么样的团队，能扁平化就扁平化。最好按业务来划分团队，这样能让团队自然的自治内聚，明确的业务边界会减少和外部的沟通成本，每个小团队都对自己的模块的整个生命周期负责，没有边界不清，没有无效的扯皮，inter-operate, not integrate。 做小而美的团队，人多会带来沟通的成本，让效率下降。亚马逊的Bezos有个逗趣的比喻，如果2个披萨不够一个团队吃的，那么这个团队就太大了。事实上一般一个互联网公司小产品的团队差不多就是7，8人左右（包含前后端测试交互用研等，可能身兼数职）。 &emsp;&emsp; 再对应下衡量微服务的标准，我们很容易会发现他们之间的密切关系： 分布式服务组成的系统 按照业务而不是技术来划分组织 做有生命的产品而不是项目 Smart endpoints and dumb pipes（我的理解是强服务个体和弱通信） 自动化运维（DevOps） 容错 快速演化 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"java","slug":"java","permalink":"https://lywlefan.github.io/tags/java/"},{"name":"指导思想","slug":"指导思想","permalink":"https://lywlefan.github.io/tags/指导思想/"},{"name":"微服务","slug":"微服务","permalink":"https://lywlefan.github.io/tags/微服务/"}]},{"title":"java整体脉络总结","date":"2019-06-04T16:00:00.000Z","path":"2019/06/05/指导思想/java/java整体脉络总结/","text":"java学习指导战略。 基础 Java基础知识 阅读源代码 String Integer Long Enum BigDecimal ThreadLocal ClassLoader&amp;URLClassLoader ArrayList&amp;LinkedList HashMap&amp;LinkedHashMap&amp;TreeMap&amp;CouncurrentHashMap HashSet&amp;LinkedHashSet&amp;TreeSet Java中的各种变量类型 熟悉Java String的使用，熟悉String的各种函数 JDK6和JDK7中substring的原理及区别 replaceFirst、replaceAll、replace区别 String对“+”的重载 String.valueOf和Integer.toString的区别 字符串的不可变性 自动拆装箱 Integer的缓存机制 熟悉Java中各种关键字原理和用法 transient instanceof volatile synchronized final static const 集合类 常用集合类的使用 ArrayList和LinkedList和Vector的区别 SynchronizedList和Vector的区别 HashMap、HashTable、ConcurrentHashMap区别 Java 8中stream相关用法 apache集合处理工具类的使用 不同版本的JDK中HashMap的实现的区别以及原因 枚举 枚举的用法 枚举与单例 Enum类 Java IO&amp;Java NIO bio nio aio 三种IO的用法与原理 netty Java反射与javassist 反射与工厂模式 java.lang.reflect.* Java序列化 什么是序列化与反序列化、为什么序列化 序列化底层原理 序列化与单例模式 protobuf 为什么说序列化并不安全 注解 元注解 自定义注解 Java中常用注解使用 注解与反射的结合 JMS 什么是Java消息服务 JMS消息传送模型 JMX java.lang.management.* javax.management.* 泛型 泛型与继承 类型擦除 泛型中K T V E object等的含义、泛型各种用法 单元测试 junit mock mockito 内存数据库（h2） 正则表达式 java.lang.util.regex.* 常用的Java工具库 commons.lang commons.*… guava-libraries netty 什么是API&amp;SPI 异常 异常类型 正确处理异常 自定义异常 时间处理 时区 时令 Java中时间API 编码方式 解决乱码问题 常用编码方式 语法糖 Java中语法糖原理 解语法糖 Java并发编程 什么是线程，与进程的区别 阅读相关源代码，并学会使用 Thread Runnable Callable ReentrantLock、ReentrantReadWriteLock、Atomic*、Semaphore、CountDownLatch、、ConcurrentHashMap、Executors 线程池 自己设计线程池、submit() 和 execute() 线程安全 死锁、死锁如何排查、Java线程调度、线程安全和内存模型的关系 锁 CAS、乐观锁与悲观锁、数据库相关锁机制、分布式锁、偏向锁、轻量级锁、重量级锁、monitor、锁优化、锁消除、锁粗化、自旋锁、可重入锁、阻塞锁、死锁 死锁 volatile happens-before、编译器指令重排和CPU指令重 synchronized synchronized是如何实现的？ synchronized和lock之间关系，不使用synchronized如何实现一个线程安全的单例 sleep 和 wait wait 和 notify notify 和 notifyAll ThreadLocal 写一个死锁的程序 写代码来解决生产者消费者问题 守护线程 守护线程和非守护线程的区别以及用法 JVM JVM内存结构 堆 栈 方法区 直接内存 堆和栈的区别 Java内存模型 内存可见性 重排序 顺序一致性 volatile 锁 final 垃圾回收 内存分配策略 垃圾收集器 G1 GC算法 GC参数 对象存活的判定 JVM参数及调优 Java对象模型 oop-klass 对象头 HotSpot 即时编译器 编译优化 类加载机制 classLoader 类加载过程 双亲委派（破坏双亲委派） 模块化 jboss modules osgi jigsaw 虚拟机性能监控与故障处理工具 jps jstack jmap jstat jconsole jhat javap btrace TProfiler 编译与反编译 javac javap jad CRF 进阶 Java底层知识 字节码、class文件格式 CPU缓存，L1，L2，L3和伪共享 尾递归 位运算 位运算实现加、减、乘、除、取余 设计模式 了解23种设计模式 在软件工程中，设计模式（design pattern）是对软件设计中普遍存在的各种问题，所提出的解决方案。设计模式并不是固定的一套代码，而是针对某一特定问题的具体解决思路与方案。可以认为是一种最佳实践，因为他是无数软件开发人员经过长时间的实践总结出来的。 设计模式的六大原则 开闭原则 里氏代换原则 依赖倒转原则 接口隔离原则 迪米特法则（最少知道原则） 合成复用原则 设计模式分类 创建型模式 单例模式 保证一个类仅有一个实例，并提供一个访问它的全局访问点。 在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如网站首页页面缓存）。 避免对资源的多重占用（比如写文件操作） 饿汉式 1234567891011public class Singleton &#123; //在类内部实例化一个实例 private static Singleton instance = new Singleton(); //私有的构造函数,外部无法访问 private Singleton() &#123; &#125; //对外提供获取实例的静态方法 public static Singleton getInstance() &#123; return instance; &#125; &#125; 饿汉式单例，在类被加载的时候对象就会实例化。这也许会造成不必要的消耗，因为有可能这个实例根本就不会被用到。而且，如果这个类被多次加载的话也会造成多次实例化。其实解决这个问题的方式有很多，下面提供两种解决方式，第一种是使用静态内部类的形式。第二种是使用懒汉式。 静态内部类式 饿汉式是只要Singleton类被装载了，那么instance就会被实例化（没有达到lazy loading效果），而这种方式是Singleton类被装载了，instance不一定被初始化。因为SingletonHolder类没有被主动使用，只有显示通过调用getInstance方法时，才会显示装载SingletonHolder类，从而实例化instance 想象一下，如果实例化instance很消耗资源，我想让他延迟加载，另外一方面，我不希望在Singleton类加载时就实例化，因为我不能确保Singleton类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化instance显然是不合适的。这个时候，这种方式相比饿汉式更加合理。 12345678910111213public class StaticInnerClassSingleton &#123; //在静态内部类中初始化实例对象 private static class SingletonHolder &#123; private static final StaticInnerClassSingleton INSTANCE = new StaticInnerClassSingleton(); &#125; //私有的构造方法 private StaticInnerClassSingleton() &#123; &#125; //对外提供获取实例的静态方法 public static final StaticInnerClassSingleton getInstance() &#123; return SingletonHolder.INSTANCE; &#125; &#125; 懒汉式 1234567891011121314public class Singleton &#123; //定义实例 private static Singleton instance; //私有构造方法 private Singleton()&#123;&#125; //对外提供获取实例的静态方法 public static Singleton getInstance() &#123; //在对象被使用的时候才实例化 if (instance == null) &#123; instance = new Singleton(); &#125; return instance; &#125; &#125; 这种懒汉式单例其实还存在一个问题，那就是线程安全问题。在多线程情况下，有可能两个线程同时进入if语句中，这样，在两个线程都从if中退出的时候就创建了两个不一样的对象。 懒汉，就是不会提前把实例创建出来，将类对自己的实例化延迟到第一次被引用的时候。getInstance方法的作用是希望该对象在第一次被使用的时候被new出来。 线程安全的懒汉式 1234567891011121314public class SynchronizedSingleton &#123; //定义实例 private static SynchronizedSingleton instance; //私有构造方法 private SynchronizedSingleton()&#123;&#125; //对外提供获取实例的静态方法,对该方法加锁 public static synchronized SynchronizedSingleton getInstance() &#123; //在对象被使用的时候才实例化 if (instance == null) &#123; instance = new SynchronizedSingleton(); &#125; return instance; &#125; &#125; 遗憾的是，他效率很低，因为99%情况下不需要同步。（因为上面的synchronized的加锁范围是整个方法，该方法的所有操作都是同步进行的，但是对于非第一次创建对象的情况，也就是没有进入if语句中的情况，根本不需要同步操作，可以直接返回instance。） 双重校验锁 123456789101112131415161718public class Singleton &#123; private static Singleton singleton; private Singleton() &#123; &#125; public static Singleton getSingleton() &#123; if (singleton == null) &#123; synchronized (Singleton.class) &#123; if (singleton == null) &#123; singleton = new Singleton(); &#125; &#125; &#125; return singleton; &#125; &#125; 线程A发现变量没有被初始化, 然后它获取锁并开始变量的初始化。 由于某些编程语言的语义，编译器生成的代码允许在线程A执行完变量的初始化之前，更新变量并将其指向部分初始化的对象。 线程B发现共享变量已经被初始化，并返回变量。由于线程B确信变量已被初始化，它没有获取锁。如果在A完成初始化之前共享变量对B可见（这是由于A没有完成初始化或者因为一些初始化的值还没有穿过B使用的内存(缓存一致性)），程序很可能会崩溃。 在J2SE 1.4或更早的版本中使用双重检查锁有潜在的危险，有时会正常工作（区分正确实现和有小问题的实现是很困难的。取决于编译器，线程的调度和其他并发系统活动，不正确的实现双重检查锁导致的异常结果可能会间歇性出现。重现异常是十分困难的。） 在J2SE 5.0中，这一问题被修正了。volatile关键字保证多个线程可以正确处理单件实例 子主题 双重校验锁优化 1234567891011121314151617public class VolatileSingleton &#123; private static volatile VolatileSingleton singleton; private VolatileSingleton() &#123; &#125; public static VolatileSingleton getSingleton() &#123; if (singleton == null) &#123; synchronized (VolatileSingleton.class) &#123; if (singleton == null) &#123; singleton = new VolatileSingleton(); &#125; &#125; &#125; return singleton; &#125; &#125; 12345678910111213141516171819202122232425class FinalWrapper&lt;T&gt; &#123; public final T value; public FinalWrapper(T value) &#123; this.value = value; &#125; &#125; public class FinalSingleton &#123; private FinalWrapper&lt;FinalSingleton&gt; helperWrapper = null; public FinalSingleton getHelper() &#123; FinalWrapper&lt;FinalSingleton&gt; wrapper = helperWrapper; if (wrapper == null) &#123; synchronized (this) &#123; if (helperWrapper == null) &#123; helperWrapper = new FinalWrapper&lt;FinalSingleton&gt;(new FinalSingleton()); &#125; wrapper = helperWrapper; &#125; &#125; return wrapper.value; &#125; &#125; 防止序列化方式 123456789101112131415161718192021222324package com.hollis; import java.io.Serializable; /** * Created by hollis on 16/2/5. * 使用双重校验锁方式实现单例 */ public class Singleton implements Serializable&#123; private volatile static Singleton singleton; private Singleton ()&#123;&#125; public static Singleton getSingleton() &#123; if (singleton == null) &#123; synchronized (Singleton.class) &#123; if (singleton == null) &#123; singleton = new Singleton(); &#125; &#125; &#125; return singleton; &#125; private Object readResolve() &#123; return singleton; &#125; &#125; 抽象工厂模式 建造者模式 工厂模式 原型模式 结构型模式 适配器模式 桥接模式 组合模式 装饰模式 外观模式 享元模式 代理模式 行为型模式 模板方法模式 命令模式 迭代器模式 观察者模式 中介者模式 解析器模式（Interpreter模式） 状态模式 策略模式 责任链模式 访问者模式 使用常用设计模式 单例 策略 工厂 适配器 责任链 实现AOP 实现IOC 不用synchronized和lock，实现线程安全的单例模式 nio和reactor设计模式 网络编程 tcp、udp、http、https等常用协议 三次握手协议 四次关闭 流量控制和拥塞控制 OSI七层模型 tcp粘包和拆包 http/1.0 http/1.1 http/2 之间的区别 Java RMI Socket HttpClient cookie与session cookie被禁用，如何实现session 用Java写一个简单的静态文件的HTTP服务器 实现客户端缓存功能，支持返回304 实现可并发下载一个文件 使用线程池处理客户端请求 使用nio处理客户端请求 支持简单的rewrite规则 上述功能在实现的时候需要满足“开闭原则” 了解nginx和apache服务器特性并搭建一个对应的服务器 用Java实现FTP、SMTP协议 进程间通讯的方式 什么是CDN？如果实现 什么是DNS 反向代理 框架知识 Servlet线程安全问题 Servlet中的filter和listener Hibernate的缓存机制 Hibernate的懒加载 Spring Bean的初始化 Spring的AOP原理 自己实现Spring的IOC Spring MVC Spring Boot2.0 Spring Boot的starter原理，自己实现一个starter Spring Security 应用服务器 JBoss tomcat jetty Weblogic 工具 git&amp;svn maven&amp;gradle 高级 新技术 Java8 lambda表达式 Stream API Java9 Jigsaw Jshell Reactive Streams Java10 局部变量类型推断 G1的并行Full GC ThreadLocal握手机制 响应式编程 Spring Boot 2.0 线上问题分析 dump获取 线程Dump 内存Dump gc dump分析 分析死锁 分析内存泄漏 自己编写各种outofmemory,stackoverflow程序 HeapOutOfMemory、 Young OutOfMemory、MethodArea OutOfMemory、ConstantPool OutOfMemory、DirectMemory OutOfMemory、Stack OutOfMemory Stack OverFlow 常见问题解决思路 内存溢出 线程死锁 类加载冲突 使用工具尝试解决问题，并总结 当一个Java程序响应很慢时如何查找问题 当一个Java程序频繁FullGC时如何解决问题 如何查看垃圾回收日志 当一个Java应用发生OutOfMemory时如何解决 如何判断是否出现死锁 如何判断是否存在内存泄漏 性能优化 使用单例 使用Future模式 使用线程池 选择就绪 减少上下文切换 减小锁粒度 数据压缩 结果缓存 编译原理知识 编译与反编译 Java代码的编译与反编译 Java的反编译工具 词法分析，语法分析（LL算法，递归下降算法，LR算法），语义分析，运行时环境，中间代码，代码生成，代码优化 操作系统知识 Linux的常用命令 进程同步 缓冲区溢出 分段和分页 虚拟内存与主存 数据库知识 MySql执行引擎 数据库建模三范式 Mysql执行计划 如何查看执行计划 如何根据执行计划进行sql优化 SQL优化 事务 事务的隔离级别 事务能不能实现锁的功能 数据库锁 行锁 表锁 使用数据库实现乐观锁 数据库主备搭建 binlog 内存数据库 常用的nosql数据库 redis memcached 使用数据库锁、NoSql实现分布式锁 性能调优 数据结构和算法知识 简单的数据结构 栈 队列 链表 数组 哈希表 树 二叉树 字典树 平衡树 排序树 B树 B+树 R树 多路树 红黑树 排序算法 各种排序算法和时间复杂度 深度优先和广度优先搜索 全排列 贪心算法 KMP算法 hash算法 一致性hash算法 海量数据处理 大数据知识 Zookeeper Solr，Lucene，ElasticSearch Storm，流式计算，了解Spark，S4 Hadoop，离线计算 分布式日志收集flume，kafka，logstash 数据挖掘，mahout 网络安全 什么是XSS 什么是CSRF 什么是注入攻击 什么是文件上传漏洞 加密与解密 什么是DOS攻击和DDOS攻击 SSL，TLS，HTTPS 如何通过Hash碰撞进行DOS攻击 用openssl签一个证书部署到apache或nginx 架构 分布式 分布式事务 rpc 分布式数据库 分布式文件系统 分布式缓存 微服务 SOA 康威定律 ServiceMesh Docker &amp; Kubernets Spring Boot Spring Cloud 高并发 分库分表 CDN技术 消息队列 ActiveMQ 监控 监控什么 CPU 内存 磁盘IO 网络IO 服务监控 监控手段 进程监控 语义监控 机器资源监控 数据波动 监控数据采集 日志 埋点 Dapper 负载均衡 DNS CDN 数据一致性 扩展 云计算 IaaS SaaS PaaS 虚拟化技术 Serverlsess openstack 搜索引擎 Solr Lucene Nutch Elasticsearch 权限管理-必须的 Shiro 区块链 基础 哈希算法 Merkle树 公钥密码算法 共识算法 Raft协议 Paxos 算法与 Raft 算法 拜占庭问题与算法 消息认证码与数字签名 应用 比特币 以太坊 超级账本 人工智能 基础 数学基础 机器学习 人工神经网络 深度学习 应用场景 框架 TensorFlow DeepLearning4J 其他语言 Groovy Python Go NodeJs Swift Rust 书籍推荐 《深入理解Java虚拟机》 《Effective Java》 《深入分析Java Web技术内幕》 《大型网站技术架构》 《代码整洁之道》 《Head First设计模式》 《maven实战》 《区块链原理、设计与应用》 《Java并发编程实战》 《鸟哥的Linux私房菜》 《从Paxos到Zookeeper》 《架构即未来》 【1】简书主页·share猿【2】掘金主页·share猿【3】JavaGuide·Snailclimb 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"java","slug":"java","permalink":"https://lywlefan.github.io/tags/java/"},{"name":"指导思想","slug":"指导思想","permalink":"https://lywlefan.github.io/tags/指导思想/"},{"name":"java基础","slug":"java基础","permalink":"https://lywlefan.github.io/tags/java基础/"}]},{"title":"成事-冯唐","date":"2019-05-29T16:00:00.000Z","path":"2019/05/30/读书/2019/5月/成事-冯唐/","text":"能治国能安民，灭吴霸越，堪称一代名相。知进退懂经营，三致千金，不愧千秋商圣。 读书笔记 战略上蔑视敌人，战术上重视敌人 有操守而无官气，多条理而少大言 人才，朴实、不贪是核心。有了核心，再有长处，可以用；没有核心，有长处也不能用。 第一要锻炼心志，早起、打坐；第二要去除妄念，别多想、别怕死——做个好领导不容易。团队成员的生老病死也要照顾。 有两件事物我愈是思考愈觉神奇，心中也愈充满敬畏，那就是头顶上的星空与内心的道德准则。 手上有刀，心里有佛。脚下有闹市，心里有山水。 上班埋头做事，下班埋头文艺；开会杀伐决断，然后去博物馆看美好书画、美好器物，养眼养心。 做事，争先，不顾身；修行，避让，不争抢。 首先，敬畏内心；其次，尊重团队；再次，害怕舆论 做大事，有担当，就靠聪明和强悍。别人做一，你做百；别人做十，你做千；只要功夫下到，笨人也会变聪明，软蛋也会变强者。 别人拼命吹牛，你拼命读书。别人拼命喝酒，你拼命读书。别人拼命做官，你拼命读书。 运筹帷幄是无形之功，公司管理运行架构是无形之功，风险管控是无形之功，人才选用育留是无形之功，文化建设是无形之功，舆情管理是无形之功，行政是无形之功，后勤保障是无形之功……一个团队，做指挥的人，做幕后的人，做的就是无形之功。 强悍，要建立在聪明的基础上。没有聪明，所谓“强悍”，就是蛮横，就是瞎胡闹。“明”字自己想不出，要认对人，让明白人替你想，然后，笃信之，这是“明”的一个变种。 虚心，首先是“有一心”，有主见，有方向，有坚守；其次，“无成心”，不固执，没有成见。 做事，不是埋头就做，而是先要有事情的全局、了解组成事情的各个环节。“大处着眼，小处着手”，小处着手之前，最好能大处着眼。 埋头做事，不问前程，成功在老天，享受在后人。 见识要多（见识多也没捷径：万卷书，万里路，多干事，多见有见识的人）； 要反复多次地想，要谨慎小心地给出意见； 对牵涉的各方利益，心里要权衡，要有公平心，要有主次、取舍等判断。 三个角度努力 一、千山鸟飞绝，万径人踪灭，一切都是浮云，到底皆为涅槃，佛教四圣谛之寂静涅槃要长记于心。 二、领会那些成事之外、做事之余的小快乐：东郊时雨，初雪在庙，和妙人分一瓶酒，闭门读一本书。 三、孔丘说：天下有道，丘不与易也。要意识到，每个猛人有每个猛人的苦。作为另一个猛人，守住自己的志向、吃自己的苦，不必羡慕别人。 吾屡教家人崇俭习劳，盖艰苦则筋骨渐强，娇养则精力愈弱也。 现在流行“女孩子要贵养”，纯属胡扯。中国的女性地位本来就低，男女性别不平等，工作机会和上升空间不平等，女孩子再“贵养”，像养宠物，进入社会如何竞争？ 认命，不是投降；认命，是知道自己能做什么，然后，努力去做，是谓“安命”。 听话，出活 做事越多，成事越多，噪音越多。和噪音，不要讲理，要讲不理——去你的，你能你上。 成事的人往往敏感。成事之后，有闲话，不要想，不要想，不要想，做自己，做自己，做自己。 往死里练他们，能练出来就出来了，练不出来就淘汰。剩下的，都是好手。非常残酷，非常有效。成人的世界，万事皆难，除了长肉，哪有什么是容易的？ 不求胜过别人，只求胜过自己。 在商学院千百次写商业计划书，不如你在现实中写一个商业计划书，然后忽悠一些人信你了、投你了，然后你败了，所有人都恨你、都鄙视你；然后你又写了一个商业计划书，你又忽悠了一些人信你了、投你了，然后你又败了。这种痛，是那么痛；这种修行，才是真实的修行。 乃知自己全无本领，凡事都见得人家有几分是处”——认清自己，用好他人。 第一，知道自己“无本领”，才需要用人； 第二，知道他人的长处，才能用好人； 第三，恰当地表现出自己的“无本领”（办事圆融），才能让他人为自己所用。 己欲立而立人，己欲达而达人，成大事者让他人成大事 真正长见识、添阅历的时候，一定不是顺风顺水、躺着都挣钱的时候，一定是惨败、跌到谷底、破鼓众人敲、破墙众人推的时候。 “悔字诀”，上面已经说过，认清自己的长处和短处，用好周围跟你干的兄弟。 不惯着，多磨炼 不惯着。不惯着自己，不惯着团队，不惯着孩子，不惯着父母。越惯着，人性的恶越显现，越坚忍耐烦、劳怨不避，人性的善越显现。 一、俭朴生活，过中等偏下的生活，从心底里，以智慧和气质为顶级美好之物，以立功和立言为顶级追求之物，爱智慧多过爱宝石，爱买书多过爱买包包。 二、如果做不到，至少做到量入为出，轻奢而止。 三、尽量少雇人。越多助理，越多人事，越多闲话，越多麻烦，既然有了滴滴，就少养司机，既然有了外卖，就少养厨师——归根结底，还是人生三个基本原则：第一，自己的事情自己做；第二，不给别人添没必要的麻烦；第三，自己根据自己喜好和特殊情况自己定。 老洛克菲勒不是总这么谦逊，他说过：“我不喜欢钱，我喜欢的是赚钱。 他还说过一句修炼到顶尖的成事人才有自信说的话：“即使把我的衣服脱光，再放到渺无人烟的沙漠中，只要有一个商队经过，我又会成为百万富翁。” 没有天赋，想再多也没用，天花板在那儿摆着。但没有天赋，不意味着没有成果，有一个好习惯，坚持做下去，就会见效。 字因人传，买的人能从曾国藩亲手书写的笔触里、文字里汲取精神力量，书法本身的美就退居第二位了。 能够顶到自己的天花板，也不是件容易事 此处要敬畏：天赋还是硬硬地在那里，天赋还是比后天努力更重要。 如何判断是否在某个方面有天赋？ 一、你偷偷摸摸想去做，“虽千万人吾往矣”，别人怎么拦着不让你做都没有用。 二、你做的时候有快感，做完之后有满足感。 三、你做出来的东西有自己的风格，有相当多的人愿意自掏腰包买。 脸面，不是别人给的，是自己给自己的。 凡文有气则有势，有识则有度，有情则有韵，有趣则有味。 识，有天生成分，但是多读书、多行路，能后天修修。情，爱天地自然，爱人，内心偶尔或者经常肿胀。趣，好玩，角度刁蛮，不是古板的爱，而是俏皮的爱、曲折的爱、隐约的爱。 内举不避亲，如果还需要再推荐两本：一、老洛克菲勒写给小洛克菲勒的三十八封信。二、冯唐的《三十六大》。 职场中，这种人挺多见：什么都会，一无所长；说起来头头是道，做起来一塌糊涂。 这段话是说学书法的笨功夫，单日临，双日摹，遇困顿，熬过去。 不只是书法——对普通人来说，学任何技能，做任何事，都是如此。曾国藩教子，字字真切，把儿子当成普通人教育，不是当成小天才宠溺。 我们周围所见的绝大多数小孩儿和晚辈（包括自己的孩子和同族后辈）都是凡人、俗人、庸才。所以，笨功夫才是真功夫。 第一句：怕什么，就做什么。第二句：事情能做成，要么是因为有利益，要么是因为被强迫。所谓无为而成，无心而成，都是瞎扯。 判断一个事儿能否成，三原则：一、让不让干？二、会不会干？三、想不想干？ 成事的人，以平常心看待嫉妒和贪心，别苛责自己，以平衡心处之，不要让底线失守，不过分，不害人。 附作《忮求诗二首》录左。 不忮善莫大于恕，德莫凶于妒。妒者妾妇行，琐琐奚比数。己拙忌人能，己塞忌人遇。己若无事功，忌人得成务。己若无党援，忌人得多助。势位苟相敌，畏逼又相恶。己无好闻望，忌人文名著。己无贤子孙，忌人后嗣裕。争名日夜奔，争利东西骛。但期一身荣，不惜他人污。闻灾或欣幸，闻祸或悦豫。问渠何以然，不自知其故。尔室神来格，高明鬼所顾。天道常好还，嫉人还自误。 幽明丛诟忌，乖气相回互。重者灾汝躬，轻亦减汝祚。我今告后生，悚然大觉悟。终身让人道，曾不失寸步。终身祝人善，曾不损尺布。消除嫉妒心，普天零甘露。家家获吉祥，我亦无恐怖。不求知足天地宽，贪得宇宙隘。岂无过人姿，多欲为患害。在约每思丰，居困常求泰。富求千乘车，贵求万钉带。未得求速偿，既得求勿坏。芬馨比椒兰，磐固方泰岱。求荣不知厌，志亢神愈忲。岁燠有时寒，月明有时晦，时来多善缘，运去生灾怪。诸福不可期，百殃纷来会。片言动招尤，举足便有碍。戚戚抱殷忧，精爽日凋瘵。 矫首望八荒，乾坤一何大！安荣无遽欣，患难无遽憝，君看十人中，八九无倚赖。人穷多过我，我穷犹可耐。而况处夷涂，奚事生嗟忾？于世少取求，俯仰有余快。俟命堪终古，曾不愿乎外日课四条 日课四条一曰慎独则心安 二曰主敬则身强 敬事，认真做事。小处着手，小处不小，如临深渊，如履薄冰。 如果认真地做每一件自己决定要做的事，如果诚恳地对每一个自己遇见的人， 时间长了，就是一个成事的人，就是一个身强的人。 三曰求仁则人悦 四曰习劳则神钦 日记 精神足，注意力集中，做事情专注。专注之后，如果累了，不要勉强，给精神留点余地，明天再干。 一日事一日毕，不能拖。拖延症是病，要治。叉手立办，不占内存，不耗脑子，睡得更香。 天天待在个人的舒适区域，强不起来。自强，就是自找不舒服。一直自找不舒服，直到再也找不到不舒服，就是一个能成事的猛人。 第一步，承认自己的不足；第二步，改掉它，不可惜。 不为圣贤，便为禽兽；莫问收获，但问耕耘。 实事求是。在你乱七八糟的时候，在你不知道方向的时候，实事求是，懂就是懂，不懂就是不懂。德不配位是常见的大忌。你想想，你的本事和你得到的是否匹配？如果不匹配，你还坚持，劈你的雷也在坚持要劈你的路上了。 天道恶巧，天道恶盈，天道恶贰。贰者，多猜疑也，不忠诚也，无恒心也。老天爷不喜欢三种东西：巧、盈、二。取巧、自满、不定。什么是二：猜疑心、不忠心、无恒心。想讨好老天者，请读《不二》。想过好一生，也不复杂，不做老天不喜欢的事，不取巧、不自满、不犹豫，不二。 天下无易境，天下无难境；终身有乐处，终身有忧处。 取人为善，与人为善；乐以终身，忧以终身。 天下断无易处之境遇，人间哪有空闲的光阴？ 第一，没有舒适区域，大家都不容易。诗和远方在天外。 第二，时间不是用来挥霍的，是用来干活的。 做事求回报，肯定要失望。 天下事未有不从艰苦中得来而可久可大者也。 容易的事，都是小事。大事、长远的规划，都难做。难做的大事，艰难地慢慢做，一定有可以做成的那一天。不难，不做，永远不成。 用兵最戒骄气惰气，作人之道，亦惟骄惰二字误事最甚。 说到底，还是事功说话、作品说话。牛吹到天上，认识所有人，你的事功在哪里？你的作品在哪里？你自己的落脚点在哪里？ 与人为善、取人为善之道，如大河水盛足以浸灌小河，小河水盛亦足以浸灌大河，无论为上为下，为师为弟，为长为幼，彼此以善相浸灌，则日见其益而不自知矣。 与人打交道，不管给予，还是获取，要始终秉承一个善意、好心。但是，口花花的所谓“为你好”，不是“善”，切记。要有行动，要有给予，给钱、给资源、给时间，是真正的给予，反之亦然，“彼此以善相浸灌”。 我有几个老哥，每几个月，我烦了的时候，总是找他们去喝酒。我去了他们就开心，我喝嗨了他们就全劝我早些走，去成就那些我想成就的事儿。十几年下来，我有一天忽然问自己，他们为什么事开心？他们要成就什么？我竟然一无所知。 天下凡物加倍磨治，皆能变换本质，别生精彩，况人之于学乎！ 朽木，因为艺术，也能成梵高。姑且言之，姑且信之。 见识越多，越能知道自己的小，越能把自己放到合适的位置。曾国藩的伟大在于越干越觉得自己渺小，更多成事的人是越干越觉得自己无所不能。 个人永远渺小，个人永远是过客，成事的人最多是个协调者。 带团队的智慧。 第一，把我的知识、技能多教给几个人；第二，用他人的长处补充我的不足。 百种弊病，皆从懒生。懒则弛缓，弛缓则治人不严，而趣功不敏，一处迟则百处懈也。 带团队不能懒，一懒生百病——第一，纪律松懈；第二，管理不严格；第三，临战、做事迟钝，没有战斗力；第四，一处迟钝，拖累整个项目组。 不能痛哭长夜的人，不足以语人生。我看见，不能早起的人，不足以托重任。 再有，不能控制自己时间的人，答应之后无故爽约的人，绝对不是能帮你成事的人，从你人生中删除吧。 勤劳而后憩息，一乐也。至淡以消忮心，二乐也。读书声出金石，三乐也。 曾国藩的欢喜三境界：累死，能酣睡；看开，能笑忘；高声朗读，声若金石。 病房、山房、书房，都是心房，去待待，去打开，那些房间能打开多大，你的心胸就有多大。 我也常常担心，骂我的人是不是太多了？但是，我按曾国藩说的再认真检点一下我自己：你是不是在不懂装懂？是不是在无病呻吟？是不是在欺世盗名？ 难，不意味着不做，所以要天天讲、月月讲，尽力去做。 屡败屡战和屡战屡败不一样。一个是还有胜算，甚至一定能胜，一个是一定败，一定再败。 成事的人，暂时没了成事的环境，并不意味着放任自己，而是坚持锻炼，保持体重，保持体能，拼命读书、思考。 既然做事，就有掣肘、不顺心。握越大权，做越大事，更是如此。“借人之拂逆，以磨砺我之德性”，都是修行。 英雄不是脚踏祥云，而是劳心劳力。 每日须以精心果力独造幽奥，直凑单微，以求进境。一日无进境，则日日渐退矣。 关于人性，关于集体人性，关于中国历史智慧，有些见识，要日日修，日日挖掘。总觉得没真明白，总觉得自己偷懒了。 于清早单开本日应了之事，本日必了之。 自己给自己买个本子，每天早上列出每天必干的三件事，每天上床前检查，至少干完第一件。 更多的现世人，哪怕吃一个饭、开一个会，都不能不时常看他的手机，似乎有天大的事儿找他。 文集 独也者，君子与小人共焉者也。小人以其为独，而生一念之妄，积妄生肆，而欺人之事成。君子懔其为独而生一念之诚，积诚为慎，而自慊之功密。彼小人者，一善当前，幸人之莫我察也，则趋焉而不决。一不善当前，幸人之莫或伺也，则去之而不力。幽独之中，情伪斯出，所谓欺也。惟夫君子者，惧一善之不力，则冥冥者有堕行，一不善之不去，则涓涓者无已时。屋漏而懔如帝天，方寸而坚如金石，独知之地，慎之又慎。——《慎独论 不要和很多人的集体人性抗衡，不要和人类共同的弱点死磕，基本都会输。集体人性担心彼此的降维攻击，都会在制衡状态下呈现人性之恶 风俗之厚薄奚自乎？自乎一二人心之所向而已。民之生，庸弱者戢戢皆是也，有一二贤且智者，则众人君之而受命焉；尤智者，所君尤众焉。此一二人者之心向义，则众人与之赴义，一二人者之心向利，则众人与之赴利。众人所趋，势之所归，虽有大力莫之敢逆。故曰挠万物者莫疾乎风。风俗之于人之心，始乎微，而终乎不可御者也。先王之治天下，使贤者皆当路在势，其风民也皆以义，故道一而俗同。世教既衰，所谓一二人者不尽在位，彼其心之所向，势不能不腾为口说而播为声气。而众人者，势不能不听命而蒸为习尚。（启超按：“势不能不”四字极见得到，此深于社会学者之言也。）于是乎徒党蔚起，而一时之人才出焉。有以仁义倡者，其徒党 亦死仁义而不顾；有以功利倡者，其徒党亦死功利而不返。水流湿，火就燥，无感不讐，所从来久矣。今之君子之在势者，辄曰天下无才。彼自尸于高明之地，不克以己之所向转移习俗，而陶铸一世之人，而翻谢曰无才，谓之不诬可乎？十室之邑，有好义之士，其智足以移十人者，必能拔十人中之尤者而材之。其智足以移百人者，必能拔百人中之尤者而材之。然则转移习俗，而陶铸一世之人，非特处高明之地者然也，凡一命以上，皆与有责焉者也。有国家者得吾说而存之，则将慎择与共天位之人。士大夫得吾说而存之，则将惴惴乎谨其心之所向，恐一不当而坏风俗，而贼人才。循是为之，数十年之后，万一有收其效者乎？非所逆睹已。（启超按：此篇公之少作也。深明社会变迁之原理，我国数千年来不多见之名文也。公于 穷时、达时皆能以心力转移风气，亦可谓不负其言矣。）——《原才》 又有多少人能简单、坦诚、阳光地和僚友们掰扯是非、毁誉和成败？掰扯之后，反复掰扯之后，又有几个人能简单、坦诚、阳光地接受和改善？ 学贵初有决定不移之志，中有勇猛精进之心，末有坚贞永固之力。——《国朝先正事略序》 先立志，再用心，最后坚持住。不做到中国第一、世界前列，怎么好意思收兵？ 易做的事，都是小事；易读的书，都是简单清浅的书。不要走捷径，捷径都是通向邪路最快的路。 走远路，下笨功夫，一点一滴进步。全力争取名实相符，尽量不要德不配位。 在现世，难。现世的常规是能捞一笔是一笔，能骗一时是一时，能忽悠一拨儿是一拨儿，成名要趁早。 君子做官路子多，都是从保持独立、不求人（不依附大官）开始；小人做官路子也多，都是从求人（依附大官）开始 天可补，海可填，南山可移，日月既往不可复追。其过如驷，其去如矢，虽有大智神勇莫可谁何。光阴之迁流如此，其可畏也，人固可自暇逸哉？——《朱玉声寿序》 兵[插图][插图]一个，将[插图][插图]一窝。 不干事、不成事的风气稳定，老的能人都走光了，新来的能干的也一个个被整走。 大到一个社会，小到一个团队，才华卓异的人少见，蠢笨的人也少见，大多数是普通人（中材）。普通人，要有精英引导、教育、带动。 坚守常识，超越人性，就是精英。 贫富太过悬殊的结果，精英、群众，都是死，虽然死法不同。 即使在乱世，即使在末世，有些鸟生下来就不是为了躲枪子儿的，有些人活着，就是为了成事的。这是人世轮回、不至于万劫不复的根本。 做事在人，成事在天。先做再说，于心无憾。至于闲话，算个屁。 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"曾国藩","slug":"曾国藩","permalink":"https://lywlefan.github.io/tags/曾国藩/"},{"name":"解读","slug":"解读","permalink":"https://lywlefan.github.io/tags/解读/"}]},{"title":"常用工具收集","date":"2019-05-27T16:00:00.000Z","path":"2019/05/28/工具/常用工具收集/","text":"工欲善其事，必先利器！ 常用工具总结办公效率提升的工具 好用的markdown编辑器:Ulysses 支持系统:mac 非常好用的markdown编辑器:inspire 支持系统:windows Alfred:解放双手的神器 支持系统: mac Wox:解放双手的神器 支持系统:windows 离线文档工具 dash 系统:mac Velocity 系统:windows 日常小工具 LICEcap(比较好用的生成gif的小工具) CheatSheet:CheatSheet可不仅仅是把快捷键集中在一个表单上按住command键两秒钟，CheatSheet就会自动弹出来，告诉你当前程序的快捷键都有哪些。 支持系统:mac 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"收藏","slug":"收藏","permalink":"https://lywlefan.github.io/tags/收藏/"},{"name":"工具","slug":"工具","permalink":"https://lywlefan.github.io/tags/工具/"}]},{"title":"名言收录","date":"2019-05-26T16:00:00.000Z","path":"2019/05/27/名言收录/","text":"好记性不如烂笔头! 技术总是短期被高估，但长期被低估。 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"收藏","slug":"收藏","permalink":"https://lywlefan.github.io/tags/收藏/"},{"name":"名言","slug":"名言","permalink":"https://lywlefan.github.io/tags/名言/"}]},{"title":"我的文章收藏夹","date":"2019-05-26T16:00:00.000Z","path":"2019/05/27/自律给我自由,自律让我成长/","text":"好记性不如烂笔头! 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"自我承诺","slug":"自我承诺","permalink":"https://lywlefan.github.io/tags/自我承诺/"}]},{"title":"5月27日日报","date":"2019-05-26T16:00:00.000Z","path":"2019/05/27/看报/2019/5月/5月27日日报/","text":"多读书，多看报，少吃零食，少睡觉！ 任正非接受专访称“胜利一定属于华为” 讲述海思背后的故事做了两万枚金牌奖章上面的题词是不死的华为主持人：当外界都在担忧华为如此生死攸关的一个时刻，您反而有点超然事外，要谈教育，教育还是您最关心的事情，为什么? 任正非：第一点，我们从来就没觉得我们会死亡。我们已经做了两万枚金牌奖章，上面的题词是不死的华为。我们根本不认为我们会死，我们为什么把死看得那么重?所以我们认为梳理一下存在的问题，哪些问题去掉，哪些问题加强，胜利一定是属于我们的。一些高端的产品美国也没办法，因为我们完全靠自己，不靠美国。 我关心教育不是关心华为，是关心我们国家。如果不重视教育，实际上我们会重返贫穷的。因为这个社会最终要走向人工智能的，你可以参观一下我们的生产线，20秒钟一部手机从无到有，基本上没有什么人。未来我们几百条上千条生产线完全是自动化的。所以我们的人的文化素质不够，至少你没受过大专或者大学以上的教育，你的英文也不好，计算机也不好，做工人的机会都不存在。 从我们公司的缩影，放大来看这个国家，国家也要走向这一步，否则国家是没有竞争力的。 美国枪打出头鸟但没想到我们消灭不了主持人：您认识到了这样一个关键性的问题，但是您企业再大，也就是一家企业，您能为改变这个社会问题做些什么? 任正非：我能看到科学家真实的研究能达到的水平，达到这个水平的难度我知道，我认为要从最基础抓起，要尊师重教，能真正这样子，将来这个国家二三十年、三五十年有希望。这个二三十年，人类一定会爆发一场巨大的革命，这个革命的恐怖性人人都看到了，特别是美国看得最清楚。看得最清楚，他们才能打你这个出头鸟。他们没想到我们早有准备消灭不了，他们没想到，他们以为还是那个架起几门炮就吓唬一个国家的时代，可能误判了，对吧。以为抓起我们国家一个人就摧毁了我们的意志，这个也误判了。所以我认为我们国家其实从今天抓起，如果我们农村的孩子二三十年以后好多都是博士硕士了，就会为国家在新的创新领域去搏击，争取国家新的前途和命运，这才是未来。 (关注教育是因为)爱国，爱这个国家，希望这个国家繁荣富强，不要再让人欺负了。 华为没有到最危险时刻现在是在最佳状态主持人：当很多人知道我来采访您的时候，他们都希望我问的一个问题就是华为是不是已经到了最危险、最危难的时候? 任正非：不会，在我们没有受到美国打压的时候，孟晚舟事件没发生的时候，我们公司是到了最危险的时候，惰怠，大家的口袋都有钱了，不服从分配，不愿意去艰苦的地方工作，是危险状态了。现在我们公司全体振奋，战斗力在蒸蒸日上，这个时候我们怎么到了最危险的时候呢?应该是在最佳状态了。 主持人：海思(华为负责所有半导体芯片以及核心器件开发和交付的部门)在近段时间以来，在所有人的心目中几乎像一个英雄一样。 任正非：它本来就是一个英雄，你想他们奖牌拿了多少，这个职级有多高，各方面的收入有多少，我就问过他们，他们说默默无闻。我说钱少了吗?不少。那就行了嘛! 主持人：您为什么要用钱这个标准来问? 任正非：开玩笑，他们也想去张扬一下，不允许，他们那个手机研发的人也跑到台上去演讲，我们就批评，老老实实回到科研室去，不要去社会上讲，让他们搞销售的去讲，你那个搞研发的不要去讲。 主持人：为什么? 任正非：踏踏实实干活，活没干好，张扬有什么结果? 主持人：对他们来说什么叫干好了? 任正非：产品。 主持人：如果他们始终憋着，能证明他们是干好还是没干好? 任正非：他们怎么会憋着?回去老婆老表扬他，他老婆一天出去买好几个包，回来就说你看这包好不好看?不就是表扬他了吗?他不挣那么多钱老婆拿什么去买包? 主持人：外界不知道。 任正非：为什么要外界知道呢?我觉得不需要外界知道。其实到国家领奖的人不是真发明人，(我)不会让真的发明人去领奖，傻乎乎把他照片贴到网上!你看网上其实何庭波的照片好多都是假的，多数时候不是她。 华为差点100亿美元把海思卖给美国主持人：就在当年2004年甚至更早的时候中美关系一切正常，而且国际供应链一切正常，为什么您会预想假如这个世界不正常怎么办? 任正非：我们曾经是准备用一百亿美金把这个公司卖给一个美国公司，卖给人家的时候，合同也签订了，所有手续办完了，那么我们穿上花衣服，就在海滩上跑步，比赛跑步，比赛打乒乓球，但是这个星期美国公司的董事会发生变化，新董事长否决了这项收购。那么好，我们回来再讨论，我们还再卖不卖，少壮派是激进派，坚决不再卖了，我们就说十年以后我们和美国在山头上遭遇，我们肯定是输家。那我们就要有思想准备，备胎计划就出来了。 今天有人也说5G将来会不会分裂成两种标准，西方一种标准、东方一种标准，我认为是不会的，因为人类好不容易统一了一个标准，为共同的全球云社会服务，这样两种标准就是两朵云，这个东西将来很难交融。对吧? 不是有人提过吗，既然有备胎你为什么早不用呢?我们就是为了西方公司的利益，我们不让西方的利益被挤榨了，朋友就变多了。你看我压制住公司不要做8K电视机，日本、韩国所有的电视机用的是我们的芯片，用的是我们的系统。 主持人：可能很多人就不大能理解刚才您说的这样一句话，有的时候放着这个钱不挣，要让别人去挣，这是什么样的考虑? 任正非：我们已经够多了，要不要把他们常务董事会去年利润太多的检查拿来给你看看，我还没批示。 主持人：是不是它们(海思)永远不启用才是一个正常的、好的状态? 任正非：一直也在用，没有说不用，只是说现在可能就是他们挺身而出，主要以他们供应为主体。如果说正式断了以后，如果是美国继续恢复供应，他们还是继续少量生产。 主持人：您觉得还能有这天吗? 任正非：也许，也许美国走走，发现走错了，它就自己纠正了。 学生超过老师老师不高兴，打一棒，是可以理解的主持人：您曾经第一句话就说要感谢美国。 任正非：对。 主持人：因为是他们教给我们怎么走路，怎么能够成长，今天让您、让华为公司感受到这个世界的复杂里面有不公的也恰恰是这个国家。 任正非：从来都是学生超过老师，这不是很正常的?学生超过老师，老师不高兴，打一棒，是可以理解的。世界流体力学和空气动力学是一对父子发明的，叫伯努利，伯努利这个父亲嫉妒自己儿子在空气动力学上超过他，残酷地迫害他的儿子，他的儿子就是他的学生。美国是我们的老师，看到学生超过它不舒服也是存在的，没关系。写论文的时候加一个名字，把它放在前面，我放在后面不就完了吗? 主持人：您准备怎么去面对未来也许会长期存在的这个中美贸易冲突? 任正非：这本来就是可能长期，我们准备打持久战的，我们没有准备打短期突击战，我们突击战也打。我们度过产品切换磨合这个阶段，我们可能会更强大。 华为从来不用完人总追求完美就没有希望主持人：您反对的是那种盲目地在补短板的过程中，这种所谓的知识产权的创新。 任正非：坚决反对。完美的人就是没用的人，我们公司从来不用完人，一看这个人总是追求完美，就知道他没有希望，这个人有缺点，缺点很多，这个人好好观察一下，在哪方面能重用他一下，说他不会管人，就派个赵刚去做政委就行了。 我就举个例子，俄罗斯有个科学家、大数学家，这小伙子不会谈恋爱，就是只会做数学，他到我们公司来十几年天天在玩电脑，不知道在干什么。然后我们管五万研发人员的人到莫斯科去看他，打个招呼，一句话就完了。我给他发院士牌时，跟他讲话，嗯， 嗯，三个嗯完了，没有了。 他十几年默默无闻在干啥我们并不知道。突然告诉我，我们把2G到3G突破了，这个算法突破了，一讲，我们马上在上海进行实验，实验确实证明了，我们就这么一下就领先全世界。 中美贸易的根本问题还是科技教育水平 主持人：您为什么要做这样的调查(自费请权威机构的专家进行中国基础教育状况的调查研究)? 任正非：我就希望我们国家繁荣富强，希望国家能实现自己国家的梦想。 因为我父母是乡村教师，父母跟我们讲今生今世不准当老师，对我们人生选择，你做啥都不管，但是今生今世不准做老师，我们印象很深刻，果然我们后来都没有做老师的。但是老师是人类灵魂的工程师，没有老师这个社会怎么办?问题就要改变对教师的政策。所以我才说再穷不能穷教师，就是说再穷也要对未来投资，就像我们战略投资一样，我们每年给大学那些教授支持的钱数额都是巨大的。说我有实力，是因为我对未来有投资。教育也是国家的未来，如果我们的教育像日本一样，像北欧一样，像德国一样，那我们国家还担心什么和美国竞争的问题?如果说我们教师的待遇不高，孩子们、优秀的人都不愿意去当老师，那只会马太效应，越来越差，越来越差。 主持人：所以在您看来再穷不能穷教师和再穷不能穷未来是一个道理? 任正非：当然我们国家七十年来有巨大进步，这三十年也有巨大改善，对吧?教师的生活也有大的进步。但是我们要看到他们是我们祖国的未来。他们是担负着给花朵浇水的人，我们都不给花朵浇水的人一种事业心、一种使命感的话，他就少浇两次水，花枯萎了，我们不就是一个乔布斯少掉了吗? 主持人：我们把这个谈教育的背景再放得宽一点，如果教育是这样的现状的话，我们怎么去面对现在以及未来很有可能持续的中美贸易争端? 任正非：我就觉得中美贸易的根本问题还是科技教育水平，国家一定要开放，才有未来。但是开放一定自己要强身健体，强身健体的最终是要有文化素质。 我在华为已经是个“傀儡”了我从来都不想当英雄主持人：这样我就能理解为什么您在大家都在关注中美贸易争端，在关注华为的未来的时候，您不关心这个，您关心的是我们的教育。 任正非：对，华为的未来不用我想，我们下面的人就应该想得比较清楚，他们只是希望得到我支持一下就行了。我不需要具体地去操心华为太多的事情。我在华为已经是个“傀儡”了，这“傀儡”就是人家来问你一下就算数，不问我，我就不知道。 主持人：美国压境的时候觉得您是民族英雄，您愿意接受这样的称号吗? 任正非：不接受，狗熊。我根本就不是什么英雄，我从来都不想当英雄。任何时候我们是在做商业性的东西，商品的买卖不代表政治态度，这个时代变了，怎么买苹果手机就是不爱国?哪能这么看?那还开放给人干什么。商品就是商品，是个人喜好构成的，这根本没啥关系。媒体炒作有时候偏激，偏激的思想容易产生民粹主义，对一个国家是没好处的。 据央视 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"日报","slug":"日报","permalink":"https://lywlefan.github.io/tags/日报/"}]},{"title":"我的文章收藏夹","date":"2019-05-23T16:00:00.000Z","path":"2019/05/24/文章收藏/","text":"好记性不如烂笔头! 1.技术栈WEB开发前端后端java 基础 springboot 监控 grafana python 基础 Python - 100天从新手到大师·骆昊 1.2.高级技术1.2.1.深度学习 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"收藏","slug":"收藏","permalink":"https://lywlefan.github.io/tags/收藏/"},{"name":"文章","slug":"文章","permalink":"https://lywlefan.github.io/tags/文章/"}]},{"title":"我的网址收藏夹","date":"2019-05-22T16:00:00.000Z","path":"2019/05/23/网址收藏/","text":"目标刻在岩石上，方法写在沙滩上. 1.技术栈1.1.WEB开发1.1.1.前端1.1.2.后端 程序员DD 周立|Spring Cloud 泥瓦匠BYSocket的博客 KL博客 Edison Xu’s Blog 梁桂钊的博客 城南往事 Any-Video 钿畑的博客 chenssy 徐靖峰|个人博客 猿天地 crossoverjie 芋道源码 Pure White 小柒 汤雪华的博客 1.1.3.项目管理 张逸的博客(ThoughtWorks架构师) 1.2.高级技术1.2.1.深度学习 神经网络与深度学习·邱锡鹏 2.运营3.管理4.博客 技匠社 少数派 李学凯 4.1.新闻咨询4.1.1.本地新闻咨询 华商网 西安晚报 三秦都市晚报 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"收藏","slug":"收藏","permalink":"https://lywlefan.github.io/tags/收藏/"},{"name":"网址","slug":"网址","permalink":"https://lywlefan.github.io/tags/网址/"}]},{"title":"5月23日日报","date":"2019-05-22T16:00:00.000Z","path":"2019/05/23/看报/2019/5月/5月23日日报/","text":"多读书，多看报，少吃零食，少睡觉！ 习近平:奋力开创中部地区崛起新局面&emsp;&emsp;他强调，要在实施创新驱动发展战略、发展战略性新兴产业上下更大功夫。(阅读原文) 突发！华为遭致命打击，ARM暂停芯片架构合作，危及备胎计划&emsp;&emsp;刚刚，BBC最新报道称，其获得的内部文件显示，英国芯片设计公司ARM已经告诉员工，必须暂停与华为的业务往来。 一季度陕西省战略性新兴产业平稳开局&emsp;&emsp;一季度，陕西省战略性新兴产业实现增加值592亿元，占地区生产总值的10.9%，比2018年全年提高0.1个百分点；同比增长10.6%，比2018年全年加快0.2个百分点，高出地区生产总值增速4.3个百分点。其中，高端装备制造业亮点突出，增加值增速达到了23.1%。（西安日报）原文链接 华为称有信心解决芯片设计合作伙伴ARM暂停合作问题&emsp;&emsp;据国外媒体报道，华为表示，该公司有信心能够解决芯片设计合作伙伴ARM暂停合作的问题。华为一位发言人表示：我们重视与合作伙伴的密切关系，但也认识到，由于出于政治动机的决定，其中一些合作伙伴承受着压力。我们相信这一令人遗憾的局面能够得到解决，我们的首要任务仍然是继续向全球客户提供世界级的技术和产品。（TechWeb）原文链接 腾讯智慧农业与农科院成立联合实验室&emsp;&emsp;在刚刚结束的首届腾讯全球数字生态大会上，腾讯宣布在智慧农业领域的最新进展：国际上与欧洲农业大学WUR联办第二届“国际智慧温室种植大赛”，国内与中国农科院信息所成立智慧农业联合实验室。（腾讯科技）原文链接 殷宇：腾讯信息流将全面整合QQ看点、QQ浏览器信息流、天天快报&emsp;&emsp;36氪讯，5月22日，在2019腾讯全球数字生态大会信息流专场上，腾讯副总裁殷宇表示，腾讯信息流将全面整合QQ看点、QQ浏览器信息流、天天快报三款产品，统一推荐引擎、社交能力、搜索能力、扶持政策，提升信息流广告、搜索广告、游戏分发、直播关注等商业转化能力，更好地帮助内容创作者降低门槛、提升商业转化。 腾讯智能机器人推出智能IP合作计划&emsp;&emsp;36氪讯，5月22日，在2019腾讯全球数字生态大会智能机器人专场上，腾讯智能机器人启动“智能IP合作计划”。腾讯渠道合作部负责人焦阳表示，目前腾讯智能机器人与IP品牌的合作模式有三种，形象授权、联合生产以及销售共建。同时，腾讯智能机器人发布具备智能语音交互、游戏 AI 陪伴、融入情感化人设的智能机器人“妲己”。 英国电信CTO：相比无线网络，华为禁令对手机冲击更大&emsp;&emsp;英国电信首席技术官Howard Watson称，美国通过黑名单限制华为购买美国微芯片和软件，“对设备的影响超过对无线接入网络。”“华为无线接入也有美国供应商，所以我们正在密切关注这方面情况。显然，已经发货的还可以加工制造和交付。”他表示，“我们有自己的库存。我们正与华为一道研究他们的库存水平，所以我预计不会马上出现中断，但我当然希望能确定下来，并尽快解决。”（彭博） 华为自研操作系统内部代号为“Project Z”&emsp;&emsp;The Information报道称华为的自研操作系统内部代号为“Project Z”，在过去几年一直处于研发中，现在谷歌同华为结束部分合作使得华为加速该项目的进展。报道还称，华为一开始只是打算把该操作系统用在国内市场，当中国转向下一代5G无线网络时，华为希望其操作系统能够为搭载在各种设备上，从手机到可穿戴设备再到家用电器。（IT之家）原文链接 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"日报","slug":"日报","permalink":"https://lywlefan.github.io/tags/日报/"}]},{"title":"5月22日日报","date":"2019-05-21T16:00:00.000Z","path":"2019/05/22/开源项目学习/WxJava/WxJava项目介绍/","text":"【1】简书主页·share猿【2】掘金主页·share猿【3】WxJava ·班纳睿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"java","slug":"java","permalink":"https://lywlefan.github.io/tags/java/"},{"name":"开源项目","slug":"开源项目","permalink":"https://lywlefan.github.io/tags/开源项目/"},{"name":"微信sdk","slug":"微信sdk","permalink":"https://lywlefan.github.io/tags/微信sdk/"}]},{"title":"UNIX环境高级编程","date":"2019-05-21T16:00:00.000Z","path":"2019/05/22/读书/2019/5月/UNIX环境高级编程/","text":"多读书，多看报，少吃零食，少睡觉！ 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"读书","slug":"读书","permalink":"https://lywlefan.github.io/tags/读书/"},{"name":"技术","slug":"技术","permalink":"https://lywlefan.github.io/tags/技术/"},{"name":"计算机基础","slug":"计算机基础","permalink":"https://lywlefan.github.io/tags/计算机基础/"},{"name":"操作系统","slug":"操作系统","permalink":"https://lywlefan.github.io/tags/操作系统/"},{"name":"UNIX","slug":"UNIX","permalink":"https://lywlefan.github.io/tags/UNIX/"}]},{"title":"下一个倒下的会不会是华为(田涛、吴春波)","date":"2019-05-21T16:00:00.000Z","path":"2019/05/22/读书/2019/5月/下一个倒下的会不会是华为-田涛、吴春波/","text":"多读书，多看报，少吃零食，少睡觉！ 人物记录任正飞 著作 《我的父亲母亲》 《北国之春》 笔记摘抄引子华为管理哲学&emsp;&emsp;任正非说:“我们没有任何背景，也没有任何资源，我们除了拥有我们自己，其实一无所有。”“一切进步都掌握在自己手中，不在别人。” &emsp;&emsp;以客户为中心，以奋斗者为本，长期坚持艰苦奋斗。 G:华为掌门人的哲学用实际行动植根在了每个华为人的心中，从全民持股到耗散机制，这个集体有着共同的目标，而任就是点亮远处灯塔的那个人。他们只做好自己，学习别人的优点，反思别人的缺点，坦然面对一切，居安思危，砥砺前行！正如作者在文中说：如同铀原子在中子轰击下产生的核能量一样，你身上的小小原子核，在价值观的驱使下，发生了巨大的原子能。 华为初步形成了一个稳定与动态相融合的“金字塔”&emsp;&emsp;最高层是组织的思想领袖群体，次高层是一批企业战略家和技术领袖，第三层是数百位各个功能体系的指挥员，他们必须具备战略思维，同时又调兵遣将、决策局部战役的统帅力；第四层是数千位经营、管理与研发方面的中基层管理者、技术领头人；“金字塔”的基座是10多万普通的知识员工，他们代表着华为这架商业战车真正战斗力与竞争力。 是什么让华为快速发展？&emsp;&emsp;是一种哲学思维，它植根于广大骨干心中。这就是“以客户为中心，以奋斗者为本，长期艰苦奋斗”的文化。这并不是什么背景，更不是什么上帝。 六个字 开放 妥协 灰度 自我批判&emsp;&emsp;变化是永恒的，所以观念也要随之改变，思考一刻也不能停息。 不只任正非孤独，华为也是&emsp;&emsp;华为没有成功，只是在成长。 孤独，学会欣赏孤独&emsp;&emsp;他没有娱乐、体育的任何一项爱好，唯一的嗜好就是阅读和思考，他也没有政界、商界的朋友，可以说他从学校到部队到华为，几乎没有朋友。但他善于交流，从国内到国际，从经济、政治乃至外交，无一不侃侃而谈。但这一切也脱不开对华为的思考。 &emsp;&emsp;实践是痛苦的。为了推动、驱使或者牵引10多万知识分子到全世界攻城略地、开疆拓土，不仅需要领袖们“竭智”——绞尽脑汁去思考，也需要老大们“竭力”——冲锋在前。 第一章：常识·真理：以客户为中心客户：华为存在的唯一理由&emsp;&emsp;华为的明天在哪里？出路在哪里？ 阿尔卡特的困惑和迷茫让我不仅问自己，我的明天在哪里？出路在哪里？华为高举“以客户为中心”的旗帜，客户是华为存在的唯一理由，他是一切企业存在的唯一理由。我存在的意义是为这个世界创造更大的价值，修身，齐家，奉国！我的方向在哪里？我该如何走，我内心是迷茫的！我想创造更大的价值，但是感觉自己无能无力，只能把手头的事情做好。而你又能做什么？假如给你一个创造巨大价值的机会，你能否把我住？能否胜任？扪心自问，我还需要不断去历练，不断去打磨！每一天都是新的开始！加油！ 华为四大战略内容&emsp;&emsp;为客户服务是华为存在的唯一理由；客户需求是华为发展的原动力。 眼睛盯着客户，屁股对着老板 &emsp;&emsp;在2010年的一次会议上，任正非进一步指出：在华为，坚决提拔那些眼睛盯着客户，屁股对着老板的员工；坚决淘汰那些眼睛盯着老板，屁股对着客户的干部。前者是公司价值的创造者，后者是牟取个人私利的奴才。各级干部要有境界，下属屁股对着你，自己可能不舒服，但必须要善待他们。 被扭曲的常识 &emsp;&emsp;让客户自觉掏腰包，让更多客户掏腰包，让客户长期掏腰包，谁就能变得更伟大。 &emsp;&emsp;百年西方管理学的核心思想，绕来绕去还是离不开一个根本：如何围绕消费者的需求，为公司定位，为管理者定位，为公司产品定位。 围绕消费者的需求，字字珠玑，找到消费者就能找到市场，找到市场就能做服务，做好服务，做精服务，不断思考，不断反思，客户是上帝！ &emsp;&emsp;管理大师德鲁克把企业定义为：创造客户。 偏离客户，谁来养活我们 &emsp;&emsp;2001年7月，公司内刊《华为人》报上，有一篇文章题目为“为客户服务是华为存在的理由”，任正非在审稿时，将其改为“为客户服务是华为存在的唯一理由”，他认为：华为命中注定是为客户而存在的，出来客户，华为没有存在的任何理由，所以是唯一理由。 &emsp;&emsp;钱钟书说：“真理都是赤裸裸的。”华为高管们则说：“不要把华为文化复杂化，不要把华为文化细枝末节化。” “百年帝国”的衰落 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"读书","slug":"读书","permalink":"https://lywlefan.github.io/tags/读书/"},{"name":"科技历","slug":"科技历","permalink":"https://lywlefan.github.io/tags/科技历/"},{"name":"管理","slug":"管理","permalink":"https://lywlefan.github.io/tags/管理/"},{"name":"励志","slug":"励志","permalink":"https://lywlefan.github.io/tags/励志/"}]},{"title":"5月22日日报","date":"2019-05-21T16:00:00.000Z","path":"2019/05/22/看报/2019/5月/5月22日日报/","text":"多读书，多看报，少吃零食，少睡觉！ 马化腾谈“华为事件”：中国已走到科技发展前沿，拿来主义的空间越来越少5月21日，在昆明滇池国际会展中心召开腾讯全球数字生态大会上，马化腾对近期的华为事件作出相关评论称，中国已走到发展前沿，拿来主义的空间变少。同时也在时刻关注中兴和华为事件，关注贸易战会不会变成科技战。要在关键技术上下苦功，否则数字经济难以为继。(原文阅读·36氪) 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"日报","slug":"日报","permalink":"https://lywlefan.github.io/tags/日报/"}]},{"title":"数化万物-大数据重点战略实验室","date":"2019-05-17T16:00:00.000Z","path":"2019/05/18/读书/2019/5月/数化万物-大数据重点战略实验室/","text":"数化万物，智在融合。 关键词专业名词 数据采集 数据存储 数据分析 数据流通 大数据交易 工业大数据 云密码 量子保密通信：利用量子力学基本原理和”一次一密”加密体制来实现信息安全传递的一种全新的保密通信方法。 新学到的 澎湃社 《刷新：重新发现商业与未来》 读书笔记数化万物，智在融合国家发展和改革委员会副主任林念提出中国发展数字产业化的重点 一是增强数字技术的创新能力。 二是加速数字产业化和产业数字化。 三是着力推进“互联网+政务服务” 四是着力拓展数字经济的国际合作空间。 五是着力强化数字经济法治体系建设。 中国科学院院士-梅宏提出构建大数据体系关键点 一是数据资产地位的确立 二是建立数据的管理体制和机制 三是促进数据的共享和开放 四是保障数据安全与隐私保护 如何使人工智能变成人工智能产业？- 张䥽（po） 数据 人工智能算法 计算机资源 应用场景 &emsp;&emsp;有了大数据不一定能创造价值，因为我们面临诸多的挑战：一是数据质量问题，二是数据处理理论和方法，三是计算速度慢能耗大等问题。 加拿大新经济学家唐·塔普斯科特&emsp;&emsp;代表互联网的第二个发展阶段的区块链、分布式账本技术在保障数据与网络安全方面发挥着重要的作用。任何有价资产都可以通过区块链以安全、私密的方式进行交易，区块链技术是经济的操作系统，也是一个平台，可以革新企业和公司的模式。经济要实现从高速增长走向高质量发展，依靠的将是区块链技术。 加快大数据创新应用，推动经济社会高质量发展（王晨）2017年12月习近平总书记指出&emsp;&emsp;大数据是信息化发展的新阶段。随着信息技术和人类生产生活交汇和融合，互联网快速普及，全球数据呈现爆发增长、海量集聚的特点，对经济发展、社会治理、国家管理、人民生活都产生了重大影响。 &emsp;&emsp;审时度势、精心谋划、超前布局、力争主动，深入了解大数据发展现状和趋势及其对经济社会发展的影响，加快完善数字基础设施，推进数据资源整合和开发共享，构建以数据为关键要素，以创新为主要引领和支撑的数字经济。 大数据核心&emsp;&emsp;用数据说话，用数据决策，用数据管理，用数据创新。 &emsp;&emsp;让百姓少跑腿，数据多跑路。 谱写新时代大数据融合发展的新篇章-孙志刚&emsp;&emsp;数据连接万物、变革万物，融合基于智慧、创造智慧。融合是新时代大数据发展的最大特征和价值所在，为发展理念落地生根提供了无限可能，必将打开人们认识世界、改造世界的新大门，对社会生产方式、生活方式和社会治理模式都将产生重大而深远的影响。 &emsp;&emsp;大力开展“千企引进”、“千企改造”，“万企融合”。 &emsp;&emsp;我们在实践中深刻体会到：第一，融合是大势所趋，只有融合才能让数据释放价值，爆发力量，只有融合才能实现以信息化培育新动能、用新动能推动新发展；第二，融合并非高不可攀，融合是方向、是出路，各地区、各部门，各行业、各企业都可以在与大数据融合中找到转型升级的路径、拓展创新发展空间；第三，融合是共同追求，需要大家各施所长、各尽所能，关键在政府引领，基础在企业参与，重点在软件开发应用，导向在解决问题，目的在惠及人民；第四，融合是科技进步的主题，万物皆可数字化，数字化为融合发展创造了无限的机会，融合是展示智慧的空间，融合过程将催生无限的创新。 加快培育壮大数字经济，以新动能推动新发展-林念修5个着力 着力增强数字技术创新能力。 着力加速数字产业化和产业数字化。 三是着力推进“互联网+政务服务”。 四是着力推展数字经济国际合作空间。 五是着力强化数字经济法治体系建设。 扎实推进大数据战略，促进大数据产业繁荣发展- 陈肇雄&emsp;&emsp;数据已经成为继土地、劳动力、资本、技术之后最活跃的关键生产要素。 &emsp;&emsp;构筑软件定义、平台支撑、数据驱动、智能引领的发展新形态。 要求 突破核心技术，增强创新能力。 深化融合应用，助力提质增效。 加强数据治理，确保有序安全。 坚持开放发展，实现合作共赢。 新量子革命-潘建伟&emsp;&emsp;从某种意义上说，正是因为量子科学才催生了现代信息技术发展，比如说原子弹研究过程中，催生了现代意义上的电子计算机。在物理学家把数据传往全世界各地的时候，发展了互联网的概念。通过用原子钟来检验相对论，最后发展成为目前GPS导航技术。 随着技术的发展我们目前遇到两个问题 第一，数据以及互联网的安全性是非常重要的。 第二，随着大数据和人工智能的发展，我们对计算能力的需求日益增加。 &emsp;&emsp;AlphaGo跟人类下一盘围棋所用的电是十吨煤。 &emsp;&emsp;我们目前发展计算能力的传统手段就是把计算机集成度提高，生产更好的软件。但是，目前摩尔定律（单位面积集成电路上可容纳的半导体晶体管数目每18个月就会增加一倍）已经面临终结，不到10年左右的时间，这个规律就会停止，会达到原子的尺寸。 量子科技 经典比特 量子比特 量子纠缠 量子通讯加密 爱因斯坦：诡异的互动 光量子计算 为了一个更美好的AI时代-李彦宏简单搜索app 人工智能 永远无广告 AI产品所遵循的原则 第一，AI的最高原则是安全可靠 第二，不仅要大公司具备AI能力，小公司也要具备AI能力。 第三，AI做出来的东西不是简单模仿人，人喜欢什么就给他什么。 第四，劳动不再成为谋生的手段，而是变成人的一种需求。 &emsp;&emsp;AI的使命不是替代人，而是让技术忠诚于人类，服务于人类，让人类生活过的更美好。 让人工智能创造价值-张䥽（po）关键词 北京深醒科技有限公司 把人工智能变为产业、创造价值，取决于四个因素 数据 人工智能算法 计算资源 应用场景 &emsp;&emsp;计算机对付不了突发事件 贯彻落实健康中国战略，释放“大数据+大健康”发展红利-王世杰关键词 大扶贫 大数据 大生态 要做身体健康的民族 云上贵州 从数据时代走向数权时代- 连玉明&emsp;&emsp;我们把调整数权权属、数权权利、数据利用和数据保护的法律制度称之为数权法。 物联网发展面临的诸多挑战- 尹浩物联网面临的挑战 万物互联的实现 物联网信息安全 物联网从万物互联走向万物智连 物联网接入挑战 广域接入（如wifi） 海基 空基 天基 &emsp;&emsp;国际上通过一个互联网标准，在低功率、广连接上做了大量的工作，，60%的数据大小是100K以下，这块是全球的部署。 我国物联网在产业发展上面临很多深层次的瓶颈问题 产业竞争力不强，芯片、传感器、操作系统等核心基础能力依然薄弱，高端产品研发能力较为低下； 产业链的协同能力不强缺少上下游的资源，鼓励打造引领物联网产业发展的龙头企业； 三是标准体系问题，刚才说NBRT很好，是因为其形成了国际的标准； 四是物联网的发展有待进一步深化，要把智慧服务产业、网络信息产业、智能制造业，在“物联网+”时代和物联网进入智联网时代当中，以体制改革推动它们形成协同创新体系，让环成链。 四大融合 网络融合 数据融合 服务融合 与我们拥抱信息能力融合 赋能万物，连接未来-贺东东（树根互联技术有限公司）关键词 三一重工工业互联网实践 工业互联网 工业互联网解决基本问题 解决万物互联的问题 中国需要什么样的工业互联网平台 要工业和互联网深度融合。 &emsp;&emsp;工业互联网在美国是由通用电气公司做的，德国是由西门子公司做的，也就是说有工业背景的公司加上互联网就形成了一个工业互联网先驱领跑姿态。 一定要适合本土的需求。 现在是“变道超车”的时代。 一定要创造价值。 基于可信计算的区块链安全-沈昌祥区块链在养老产品登记领域的应用-姚余栋&emsp;&emsp;生于互联网，死于区块链。 COSMOPLAT:新动能的传播机-海尔互联网的探索与实践(陈录城)&emsp;&emsp;COSMOPLAT平台满足用户个性化需求、越来越高端化。 对原有工业的颠覆从三个方面入手 由原有产品生命周期变成用户生命周期。 全流程 全球资源共创共赢的生态。 &emsp;&emsp;什么是大规模定制模式？让用户和工厂零接触，实现用户直达工厂，工厂直达用户。 用户企业融为一体有三个颠覆点 研发体系颠覆 制造体系颠覆 营销体系颠覆 平台服务的三种场景 模式转型。 产业资源配置。 提质增效。 ####互联网主力军征战脱贫攻坚主战场-刘文奎 建档立卡 公益 美丽乡村项目 电商扶贫 留守儿童关爱项目 网络扶贫，传统企业赢在精准-石东伟 利用大数据技术控制繁育、产奶饲养等模块工作 智能喂养 扶贫给人以鱼，脱贫授人以渔，而致富是造鱼塘-马云&emsp;&emsp;贫困不是农民不努力，而是农业文明和商业文明没有完美的结合。 &emsp;&emsp;贫困县贫困不是贫困县不努力，而是发展模式没跟上。 &emsp;&emsp;在过去，联产承包责任制解决了土地上种出来东西属于谁的问题，大力激发了农民生成的积极性，而今天大数据、互联网要解决土地上种出来的东西卖给谁的问题。 &emsp;&emsp;要实现“农村现代化”，就一定要把农村乡镇现代化做起来，而不是把城镇农业化，所以这方面我们一定要高度重视。 &emsp;&emsp;大公司的大不是利润大、收入大、市场份额大，而是责任大、担当大，人们希望你能担当更多的责任，希望你能做更多的事情。 探索数字新生态-马化腾一横一纵一新 数字化的广度 &emsp;&emsp;腾讯关注数字经济的几个方面归纳为“五个生”——民生服务、生活消费、生命健康、生产制造、生态环保。 数字化的深度 数字精度 &emsp;&emsp;区块链解决了处方不篡改的难题。 &emsp;&emsp;数字的广度、深度和精度是密不可分的，流动的数据、开放的网络和智能的系统是数字新生态必不可少的部分。广度让我们每个人都受益，深度可以助力创新，精度则可以提高生活品质。一句话，数字化将创新地提高每个人的生活品质。 定义未来，超越竞争-廖建文&emsp;&emsp;今天的数字经济已经到了深水区，今天进入到了智能商业时代。 未来可以看到什么 第一，整个行业正在从“平台竞争”走向“供应链竞争”。 第二，整个竞争从“中心化”变成未来的“分布式”。 &emsp;&emsp;今天的数字化粒度，尤其是走到未来物联网、区块链之后，颗粒度会变得更细。 &emsp;&emsp;消费互联网和产业互联网的融合将会成为下一个数字经济发展的重要方向。 &emsp;&emsp;要生产什么？生产多少？生产到哪里去？这意味着下一个时代toB服务的兴起。 &emsp;&emsp;京东未来的第三条曲线就是布局为toB企业端服务的业务。 &emsp;&emsp;从”产品经营“走向”用户经营“。用户的经营代表了硬件化、社群化、内容化。所有行业都有一个共同的目标，就是如何更加深入地去连接用户，占有用户的时间，不管是社交也好，还是内容也好。 第三，从”帝国“到”生态“。 &emsp;&emsp;在智能商业中，数字协同、网络雄变的及其重要，任何一个企业不可能拥有一个全景的消费数据，我们需要社交数据，消费数据、娱乐数据等等。走到下一个时代，通过数据协同才能真正打破过去那个时代的”数据孤岛“，更重要的是我们要重新去理解什么是竞争。 &emsp;&emsp;在下半场我们思考的问题应当是如何去给消费者更好的选择、更多的选择，而不是更少的选择，我认为这是我们真正应该去做的生态。 懂得大数据，用好大数据，助力深化公共资源交易改革发展-杨洁&emsp;&emsp;建设现代化经济体系离不开大数据发展和应用，要加快形成以创新为主要引擎和支撑的数字经济。 &emsp;&emsp;李克强总理多次部署，要求推动数字经济、平台经济发展，以新产业蓬勃发展、新动能持续壮大、新人才不断涌现为经济转型做有力支撑。 &emsp;&emsp;人在干，数在算，云在转。hexo 读书感悟 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"科技","slug":"科技","permalink":"https://lywlefan.github.io/tags/科技/"},{"name":"大数据","slug":"大数据","permalink":"https://lywlefan.github.io/tags/大数据/"},{"name":"数字经济","slug":"数字经济","permalink":"https://lywlefan.github.io/tags/数字经济/"}]},{"title":"一代商圣范蠡-姜正成","date":"2019-05-17T16:00:00.000Z","path":"2019/05/18/读书/2019/5月/一代商圣范蠡-姜正成/","text":"能治国能安民，灭吴霸越，堪称一代名相。知进退懂经营，三致千金，不愧千秋商圣。 名言摘录范蠡给文种的临别书信&emsp;&emsp;飞鸟尽，良弓藏；狡兔死，走狗烹；敌国灭，谋臣亡。越王为人长颈鸟喙，可与共患难，不可与共乐。子何不去？ 人生三不朽&emsp;&emsp;立德、立功、立言，取其一容易，得其三更难，而范蠡三者全取。范蠡有为政之德，为商之德，富而好行其德，有十年声息十年教训兴越之功，有父子戮力治产积居、赀（zi）累巨万经商之功，又有《致富奇书》《范蠡兵法》《养鱼经》《陶朱公商训》著书立说之言，三者兼得，可谓德炳炳，功赫赫，言昭昭，为世人尊为商圣，万古流芳。 经济循环理论 六岁穰（rang）六岁旱，十二岁一大饥。 经商致富十二条&emsp;&emsp;人无信不立。 &emsp;&emsp;勤快节俭，谨慎负责，规矩方正，价格讲明，不负于人，富行其德。 &emsp;&emsp;能接纳，礼文接待，交关者众，能整顿，货物整齐，夺人心目。能倡率，躬行以律，亲感而生。 人谋用人要正，忠奸定兴废。 大事要慎，妄托受大害。 待人忌躁，暴躁交易少。 处事宜静，浮躁误事多。 言行宜和，和气能生财。 做事宜勤，懒惰百事废。 事谋用度宜俭，奢华财源败。 做工宜精，粗糙出劣品。 期货要准，马虎失信用。 交易要速，拖延失良机。 进货要严，滥入货价减。 出纳要谨，潦草出差错。 物谋优劣要清，混淆损耗大。 存物要整，散漫难查点。 价格要明，含糊多争执。 赊欠要审，滥出亏血本。 账目要清，糊涂弊端生。 查账要勤，懈怠滞本金。 经商之道&emsp;&emsp;一是对百姓只取十一利；遣物如遣兵。 陶朱公商训生意要勤快，切勿懒惰，懒惰则百事废。 接纳要温和，切勿躁暴，躁暴则交易少。 价格要订明，切勿含糊，含糊则争执多。 账目要稽查，切勿懈怠，懈怠则资本滞。 货物要整理，切勿散漫，散漫则查点难。 出纳要谨慎，切勿大意，大意则错漏多。 期限要约定，切勿延迟，延迟则信用失。 临事要尽责，切勿放任，放任则受害大 用度要节俭，切勿奢侈，奢侈则钱财竭 买卖要随时，切勿拖延，拖延则机会失。 赊欠要识人，切勿滥出，滥出则血本亏。 优劣要分清，切勿混淆，混淆则耗用大。 用人要方正，切勿歪斜，歪斜则托付难。 货物要面验，切勿滥入，滥入则质价低。 钱账要清楚，切勿糊涂，糊涂则弊端生。 主心要镇定，切勿妄动，妄动则误事多。 工作要细心，切勿粗鲁，粗鲁则出劣品。 说话要规矩，切勿浮躁，浮躁则失事多。 囤积货物，垄断奇居，把握时机，聚散适宜。 “天、地、人、神、鬼“。 天为先天之智，经商之本; 地为后天修为，靠诚信立身; 人为仁义，懂取舍，讲究“君子爱财，取之有道； 神为勇强，遇事果敢，敢闯敢干; 鬼为心机，手法活络，能“翻手为云，覆手为雨”。 范蠡经商十二则一是能识人。知人善恶，账目不负。 二是能接纳。礼文相待，交往者众。 三是能安业。厌故喜新，商贾大病。 四是能整顿。货物整齐，夺人心目。 五是能敏捷。犹豫不决，终归无成。 六是能讨账。勤谨不怠，取行自多。 七是能用人。因才四用，任事有赖。 八是能辩论。生财有道，阐发愚蒙。 九是能办货。置货不苛，蚀本便经。 十是能知机。 售贮随时,可称名哲。 十一是能倡率。 躬行必律,亲感自生。 十二是能运数。 多寡宽紧,酌中而行。 范蠡理财十二戒第一戒勿卑陋:应纳无文,交关不至: 第二戒勿亿柔:胸无果敢,经营不振; 第三戒勿虚华:用度无节,破败之端; 第四戒勿强辩:暴以待人,祸患难免; 第五戒勿懒惰:取讨不利,账目无有; 第六戒勿轻出:货物轻出,血本必亏; 第七戒勿争取:货重争趋,需防跌价; 第八戒勿昧时:依时贮发,各有常道; 第九戒勿固执: 拘执不通,便成枯木; 第十戒勿贪赊:贪赊多估,承卖莫续; 第十一戒勿薄蓄:货贱贮积,恢复必速; 第十二戒勿痴货:优劣不分,贻害匪浅。 范蠡经商理财十二法第一条生意要渤紧, 懒惰则百事废; 第二条接纳要温种, 躁暴则交易少; 第三条议价要订明,含糊则争执多; 第四条账目要稽查,懒怠则资本滞; 第五条货物要整理，散漫则必废残; 第六条出纳要谨慎,大意则错漏多; 第七条期银要约定,延迟则信用失; 第八条临事要责任,放弃则受害大; 第九条用度要节俭,奢侈则用途竭; 第十条买卖要随时,挨延则机宜失; 第十一条赊欠要识人，滥出则血本亏; 第十二条优劣要分清，苟且则必糊涂。 思考感悟以治大国之法，治理金口小家&emsp;&emsp;商圣让偏远的海滨金口繁荣起来靠的是什么？范蠡充分利用本地的优势资源盐和劳动力，充分发挥本地特色，让大家看不到价值的东西有了价值，当自己富有依旧不忘造福乡里，取之于民，用之于民，把金口的经济贸易充分调动了起来。 名词解释 鸱(chi)夷子皮:范蠡给自己起的经商的名字。著名政治家、军事家、经济学家、道家代表作品：《计然篇》、《陶朱公生意经》《卢氏本草经》 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"历史","slug":"历史","permalink":"https://lywlefan.github.io/tags/历史/"},{"name":"传记","slug":"传记","permalink":"https://lywlefan.github.io/tags/传记/"}]},{"title":"idea常用快捷键总结","date":"2019-05-16T16:00:00.000Z","path":"2019/05/17/工具/开发工具/idea常用快捷键总结/","text":"工欲善其事，必先利器！ 必需会的快捷键 提出选中内容为局部变量:Ctrl+Alt+V 选中代码的情况下,包裹代码(try):Ctrl+alt+T 删除类中无用的import包:Ctrl + Alt + O 格式化代码:Ctrl+Alt+L 界面相关快捷键 快速切换方案:Ctrl+~ 展开/折叠项目侧边栏:Alt+1 打开设置界面:Ctrl + Alt + S 扩展成一个窗口：shift+ctrl+f12 代码提示相关快捷键 代码提示:Ctrl+空格 代码插入:Alt+enter 光标控制相关快捷键 光标定位到上个浏览处:Ctrl(shift)+alt+left 光标定位到下一个浏览出:Ctrl(shift)+Alt+right 光标移动到下一个方法开始处:alt+down 光标移动到上一个方法开始处:alt+up 光标移动到前一个单词处:Ctrl+left 光标移动到后一个单词处:Ctrl+right 光标在代码块之间移动:Ctrl+[/] 快速定位到下一个错误和警告处:F2(加Shift键，定位到上一个错误处) 光标跳出括号(单引号等其他的类似):shift+相应符号 选中相关的快捷键 连续选中文件中相同的内容:Alt+j 按语法选中代码:Ctrl+W (连续按会有其他效果，加Shift键，产生反向选中效果) 新建相关快捷键 新建类文件:Alt+insert(光标放到文件夹) 文件切换 查看最近打开的文件:Ctrl+E 切换最近文件:Ctrl+Tab 编辑窗口的切换:Alt+left/right 查找相关快捷键 当前文件查找:Ctrl+F 当前文件替换:Ctrl+R 当前项目查找:Ctrl+shift+F 当前项目替换:Ctrl+Shift+R 查找文件:Ctrl+shift+N 查找类文件:ctrl+shift+alt+n 全局查找:shift+shift 删除和插入相关快捷键 删除当前行:Ctrl+Y 按单个单词删除:Ctrl+Backspace 复制光标所在的行:Ctrl+D 向下插入一行:shift+enter 向上插入一行:alt+shift+enter 当前行向上移动:ctrl+shift+up/down 大小写转换快捷键 大小写转换快捷键:Ctrl+shift+U 版本控制相关的快捷键 提交到本地仓库备注的快捷键:Ctrl+k 提交到本地仓库:Ctrl+Alt+K push的快捷键:Ctrl+shift+K（窗口处理的时候ctrl+enter可以快速提交） pull的快捷键:Ctrl+T 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"开发","slug":"开发","permalink":"https://lywlefan.github.io/tags/开发/"},{"name":"idea","slug":"idea","permalink":"https://lywlefan.github.io/tags/idea/"},{"name":"快捷键","slug":"快捷键","permalink":"https://lywlefan.github.io/tags/快捷键/"}]},{"title":"JAR包如何取工程外部文件","date":"2019-05-14T16:00:00.000Z","path":"2019/05/15/spring/spring-base/JAR包如何取工程外部文件/","text":"问题起源&emsp;&emsp;在开发支付stater的过程中会用到证书，而证书我们一般配置在工程项目中，那么我们自己开发的stater如何才能取到工程项目中的证书文件那？？？ 问题深究分解问题&emsp;&emsp;要想解决这个问题，我们要明确 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"spring","slug":"spring","permalink":"https://lywlefan.github.io/tags/spring/"},{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://lywlefan.github.io/tags/疑难杂症/"}]},{"title":"RestTemplate常见问题的解决办法.md","date":"2019-05-14T16:00:00.000Z","path":"2019/05/15/spring/spring-base/RestTemplate常见问题的解决办法/","text":"问题汇总 用restTemplate请求域名或着ip一直报No instances available的错 restTemplate的post请求报415错 问题处理用restTemplate请求域名或着ip一直报No instances available的错 错误描述 123java.lang.IllegalStateException: No instances available for www.baidu.comat org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient.execute(RibbonLoadBalancerClient.java:79) ~[spring-cloud-netflix-core-1.1.0.RELEASE.jar:1.1.0.RELEASE] at org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptor.intercept(LoadBalancerInterceptor.java:46) ~[spring-cloud-commons-1.1.0.RELEASE.jar:1.1.0.RELEASE] at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:86) ~[spring-web-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.http.client.InterceptingClientHttpRequest.executeInternal(InterceptingClientHttpRequest.java:70) ~[spring-web-4.3.10.RELEASE.jar:4.3.10.RELEASE] at ..... &emsp;&emsp;查看错误的跟踪链发现,自动注入的restTemplate中加入了cloud.netflix*包下面的interceptor, &emsp;&emsp;所以默认会通过RibbonLoadBalancerClient去查找注册中心的instances, &emsp;&emsp;如上面的代码，www.baidu.com肯定不存在，所以就报错了。 错误解决 &emsp;&emsp;重新实例化一个RestTemplate。 123456789101112131415@Configurationpublic class MyConfiguration &#123; @LoadBalanced @Bean RestTemplate loadBalanced() &#123; return new RestTemplate(); &#125; @Primary @Bean RestTemplate restTemplate() &#123; return new RestTemplate(); &#125;&#125; restTemplate的post请求报415错 错误描述 &emsp;&emsp;报错415 问具体解决 1234567HttpHeaders headers = new HttpHeaders();MediaType type = MediaType.parseMediaType(\"application/json;\");headers.setContentType(type);headers.add(\"Accept\", MediaType.APPLICATION_JSON.toString());JSONObject jsonObj = JSON.parseObject(JSON.toJSONString(payParams));HttpEntity&lt;String&gt; formEntity = new HttpEntity&lt;String&gt;(jsonObj.toString(), headers);restTemplate.postForObject(bestPayProperties.getBestPayUrl(),formEntity,String.class); 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"spring","slug":"spring","permalink":"https://lywlefan.github.io/tags/spring/"},{"name":"RestTemplate","slug":"RestTemplate","permalink":"https://lywlefan.github.io/tags/RestTemplate/"}]},{"title":"不用spring如何实例化一个bean","date":"2019-05-13T16:00:00.000Z","path":"2019/05/14/spring/spring-base/不用spring如何实例化一个bean/","text":"问题源起&emsp;&emsp;为什么写这么一篇文章那？主要还是源自最近在写支付的starter的过程中遇到的一个问题，我们知道在支付的过程中需要去配置一些相关的参数，因为是starter我们一般是通过配置文件的方式进行配置，引用我们stater的工程会通过yml文件中配置的属性把这些值给我们。 &emsp;&emsp;那么我想在stater里面取到这些值该如何去做那？？我直接new一个配置类对象但是却取不到，因此我们就在思考spring到底是如何实例化bean的？？他对bean做了什么？？如果不用spring的注解我们又该如何去实例化我们的bean那？带着这些问题我开始了我的解惑之旅。。。 问题深究提出问题，分解问题12345678910111213141516@AllArgsConstructor@RestController@RequestMapping(\"/api/v1/app/\")public class AppController extends BaseController &#123; @Autowired AppBannerService appBannerService; @RequestMapping(value = \"index\", method = RequestMethod.POST) public Result index(HttpServletRequest request,@RequestBody @Valid AppBannerAreaCode appBannerAreaCode) &#123; Map&lt;String,Object&gt; appMessage=new HashMap&lt;&gt;(); String appId=CommonUtils.getAppIdFromHeader(request); List&lt;AppBanner&gt; banners=appBannerService.getBannersByAppIdAndCode(appId,appBannerAreaCode.getProvinceCode()); return new Result(banners); &#125;&#125; &emsp;&emsp;上面的controller是我用日常开发常用的，AppBannerService是我们定义的业务接口，接口有实现类，我们只需要简单的注解就可以直接调用接口的方法了。 spring如何实例化bean？？ spring实例化方式有那些？？ 容器是如何实例化的？？ 我们假如不用这个注解如何去调这个接口那？？&emsp;&emsp;接下来我们就围绕以上两个问题进行展开。 解决各个问题spring实例化方式有那些？？&emsp;&emsp;软件开发到最后的最高境界就是制定标准，然后严格安装标准去开发和迭代。我个人认为spring也是如此，spring给自己定义了标准的四种实例化方式，我们在日常开发中就可以通过这四种实例化方式进行实例化，下面让我们一起细究一下这四种实例化方式： setter方法实例化 主类 1234567891011121314151617181920212223242526public interface IUserDao &#123; void addUser(); void delUser(); void updateUser(); &#125; public class UserDaoImpl implements IUserDao &#123; public void addUser() &#123; System.out.println(\"addUser方法被调用了\"); &#125; public void delUser() &#123; System.out.println(\"delUser方法被调用了\"); &#125; public void updateUser() &#123; System.out.println(\"updateUser方法被调用了\"); &#125; &#125; public class UserAction &#123; private IUserDao dao; //dao是一个依赖对象,要由springg进行管理,要生成 get set 方法 public void execute()&#123; dao.addUser(); dao.updateUser(); dao.delUser(); &#125; &#125; 配置文件 12345//配置文件&lt;bean name=\"userAction_name\" class=\"cat.action.UserAction\" &gt;&lt;property name=\"dao\" ref=\"userDao_name\" /&gt; //引用的是下面的名称&lt;/bean&gt; &lt;bean name=\"userDao_name\" class=\"cat.dao.UserDaoImpl\" /&gt; 测试 1234 //测试ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext(\"beans.xml\");UserAction action=(UserAction)ctx.getBean(\"userAction_name\");action.execute(); 构造函数 主类 123456789101112131415161718192021222324public class UserAction &#123; //public UserAction()&#123;&#125; 可以保保留一个无参的构造函数 //这是几个依赖对象,不用生成get set方法了 private UserInfo user; private String school; private IUserDao dao; //希望Spring 由构造函数注入依赖对象 public UserAction(IUserDao dao,UserInfo user,String school)&#123; this.dao=dao; this.school=school; this.user=user; &#125; public void execute()&#123; dao.addUser(); dao.updateUser(); dao.delUser(); System.out.println(user); System.out.println(school);&#125; 配置文件 123456789101112131415161718192021222324//配置文件&lt;bean name=\"userInfo_name\" class=\"cat.beans.UserInfo\" &gt; &lt;property name=\"id\" value=\"1\" /&gt; &lt;property name=\"userName\" value=\"周周\" /&gt; &lt;property name=\"password\" value=\"123\" /&gt; &lt;property name=\"note\" value=\"这是备注\" /&gt;&lt;/bean&gt; &lt;bean name=\"userAction_name\" class=\"cat.action.UserAction\" &gt; &lt;constructor-arg ref=\"userDao_name\" /&gt; &lt;constructor-arg ref=\"userInfo_name\" /&gt; &lt;constructor-arg value=\"哈尔滨师范大学\" /&gt;&lt;/bean&gt; /*也可以指定 索引和 type 属性 , 索引和type 都可以不指定&lt;bean name=\"userAction_name\" class=\"cat.action.UserAction\" &gt;&lt;constructor-arg index=\"0\" ref=\"userDao_name\" type=\"cat.dao.IUserDao\" /&gt; 如果是接口,就不能指定是实现类的类型&lt;constructor-arg index=\"1\" ref=\"userInfo_name\" type=\"cat.beans.UserInfo\" /&gt;&lt;constructor-arg index=\"2\" value=\"哈尔滨师范大学\" /&gt;&lt;/bean&gt;*/ &lt;bean name=\"userDao_name\" class=\"cat.dao.UserDaoImpl\" /&gt; 测试 1234//测试ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext(\"beans.xml\");UserAction action=(UserAction)ctx.getBean(\"userAction_name\");action.execute(); 静态工厂方式 主类 123456789101112131415161718192021//工厂,用来生成dao的实现类public class UserDaoFactory &#123;public static IUserDao createUserDaoInstance()&#123; return new UserDaoOracleImpl(); &#125;&#125; public class UserAction &#123; private IUserDao dao;//使用工厂方式注值,也要生成set方法 public void execute()&#123; dao.addUser(); dao.updateUser(); dao.delUser();&#125; public void setDao(IUserDao dao) &#123; this.dao = dao;&#125; &#125; 配置文件 123456//配置文件 &lt;bean name=\"userAction_name\" class=\"cat.action.UserAction\" &gt;&lt;property name=\"dao\" ref=\"userDao_name\" /&gt;&lt;/bean&gt; &lt;bean name=\"userDao_name\" class=\"cat.dao.UserDaoFactory\" factory-method=\"createUserDaoInstance\" /&gt; 测试 1234//测试ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext(\"beans.xml\");UserAction action=(UserAction)ctx.getBean(\"userAction_name\");action.execute(); 实例工厂 主类 1234567//工厂 =&gt;public class UserDaoFactory &#123;//这个方法不是静态的public IUserDao createUserDaoInstance()&#123; return new UserDaoOracleImpl(); &#125;&#125; 配置文件 1234567//配置文件 &lt;bean name=\"userAction_name\" class=\"cat.action.UserAction\" &gt;&lt;property name=\"dao\" ref=\"userDao_name\" /&gt;&lt;/bean&gt; &lt;bean name=\"userDaoFactory_name\" class=\"cat.dao.UserDaoFactory\" /&gt;&lt;bean name=\"userDao_name\" factory-bean=\"userDaoFactory_name\" factory-method=\"createUserDaoInstance\" /&gt; 测试 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"spring","slug":"spring","permalink":"https://lywlefan.github.io/tags/spring/"},{"name":"spring-base","slug":"spring-base","permalink":"https://lywlefan.github.io/tags/spring-base/"}]},{"title":"如何写一个stater","date":"2019-05-12T16:00:00.000Z","path":"2019/05/13/spring/spring-boot/如何写一个stater/","text":"目标刻在岩石上，方法写在沙滩上. 命名规范&emsp;&emsp;不要使用spring-boot开头的，以避免将来spring-boot官方使用你的starter而重名。 正例：xxxx-spring-boot-starter 反例：spring-boot-starter-xxxx 定功能&emsp;&emsp;你所定义的starter需要有自己的独特功能，比如spring-boot-starter-web 提供的springmvc相关的自动装配，内嵌tomcat以及相关依赖，那们你自己定义的starter也是需要界定好自己的功能。举个列子，比如要写一个支付的stater： 支付 支付通知 支付查询 退款 退款查询 退款通知 项目依赖 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"spring","slug":"spring","permalink":"https://lywlefan.github.io/tags/spring/"},{"name":"spring-boot","slug":"spring-boot","permalink":"https://lywlefan.github.io/tags/spring-boot/"}]},{"title":"如何快速寻找到一个问题的答案","date":"2019-04-30T16:00:00.000Z","path":"2019/05/01/方法论/如何快速寻找到一个问题的答案/","text":"目标刻在岩石上，方法写在沙滩上。 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"方法","slug":"方法","permalink":"https://lywlefan.github.io/tags/方法/"}]},{"title":"spring的核心jar","date":"2018-05-29T16:00:00.000Z","path":"2018/05/30/spring/spring的核心jar/","text":"&emsp;&emsp;实践一门技术的最好方式就是深入理解它的思想，然后造一个出来！ Spring AOP：Spring的面向切面编程，提供AOP（面向切面编程）的实现 Spring Aspects：Spring提供的对AspectJ框架的整合 Spring Beans：Spring IOC的基础实现，包含访问配置文件、创建和管理bean等。 Spring Context：在基础IOC功能上提供扩展服务，此外还提供许多企业级服务的支持，有邮件服务、任务调度、JNDI定位，EJB集成、远程访问、缓存以及多种视图层框架的支持。 Spring Context Support：Spring context的扩展支持，用于MVC方面。 Spring Core：Spring的核心工具包 Spring expression：Spring表达式语言 Spring Framework Bom： Spring Instrument：Spring对服务器的代理接口 Spring Instrument Tomcat：Spring对tomcat连接池的集成 Spring JDBC：对JDBC 的简单封装 Spring JMS：为简化jms api的使用而做的简单封装 Spring Messaging： Spring orm：整合第三方的orm实现，如hibernate，ibatis，jdo以及spring 的jpa实现 Spring oxm：Spring对于object/xml映射的支持，可以让JAVA与XML之间来回切换 Spring test：对JUNIT等测试框架的简单封装 Spring tx：为JDBC、Hibernate、JDO、JPA等提供的一致的声明式和编程式事务管理。 Spring web：包含Web应用开发时，用到Spring框架时所需的核心类，包括自动载入WebApplicationContext特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类。 Spring webmvc：包含SpringMVC框架相关的所有类。包含国际化、标签、Theme、视图展现的FreeMarker、JasperReports、Tiles、Velocity、XSLT相关类。当然，如果你的应用使用了独立的MVC框架，则无需这个JAR文件里的任何类。 Spring webmvc portlet：Spring MVC的增强 【1】简书主页·share猿 【2】掘金主页·share猿 — 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"spring源码","slug":"spring源码","permalink":"https://lywlefan.github.io/tags/spring源码/"},{"name":"总汇","slug":"总汇","permalink":"https://lywlefan.github.io/tags/总汇/"}]},{"title":"MySQL优化总结","date":"2018-05-26T16:00:00.000Z","path":"2018/05/27/数据库/MySQL优化总结/","text":"&emsp;&emsp;实践一门技术的最好方式就是深入理解它的思想，然后造一个出来！ 数据库设计 适当冗余 冗余长时间不变更的字段 冗余数据增量较小的表的字段,衡量好得失 适当建立索引 可是天下没有免费的午餐，查询速度的提高是以插入、更新、删除的速度为代价的，这些写操作，增加了大量的I/O。 一个表的索引所占空间比数据所占空间还大的情况经常发生. 我们建立一个索引，必须保证这个索引不会“亏本”,一般需要遵守这样的规则： 索引的字段必须是经常作为查询条件的字段 如果索引多个字段，第一个字段要是经常作为查询条件的。如果只有第二个字段作为查询条件，这个索引不会起到作用; 索引的字段必须有足够的区分度; Mysql 对于长字段支持前缀索引(所谓的前缀索引就是某些字段只过长,可以取部分值进行检索); 对表进行水平划分 记录数太多了,上千万条 可以取一个维度对表进行拆分,比如地域/月份 对表进行垂直划分 记录不多,但是字段很长的情况 选择适当的字段类型，特别是主键 保小不保大，能用占用字节小的字段就不用大字段(比如主键，我们强烈建议用自增类型) 值得一提的是，datetime和timestamp，datetime占用8个字节，而timestamp占用4个字节 文件、图片等大文件用文件系统存储，不用数据库外键表示清楚，方便建立索引&emsp;&emsp;我们都知道，在powerdesigner里为两个实体建立关系，生成物理模型时会自动给外键建立索引。所以我们不要怕建立关系把线拉乱，建立个ShortCut就好了。 掌握表的写入时机 同样是写入一个表，先写和后写对后续的操作会产生很大影响 宁可集中批量操作，避免频繁读写&emsp;&emsp;系统里包含了积分部分，学生和老师通过系统做了操作都可以获得积分，而且积分规则很复杂，限制每类操作获得积分不同，每人每天每类积分都有上限。比如登录，一次登录就可以获得1分，但是不管你登录多少次，一天只能累积一个登录积分。这个还是简单的，有的积分很变态，比如老师积分中有一类是看老师判作业的情况，规则是：老师判了作业，发现学生有错的，学生改过了，老师再判，如果这时候学生都对了，就给老师加分，如果学生还是错的，那就接着改，知道学生都改对了，老师都判完了，才能给老师加分。如果用程序来处理，很可能每个功能都会额外的写一堆代码来处理这个鸡肋似的积分。不仅编程的同事干活找不到重点，还平白给数据库带来了很大的压力。经过和需求人员的讨论，确定积分没有必要实时累积，于是我们采取后台脚本批量处理的方式。夜深人静的时候，让机器自己玩去吧。 选择合适的引擎&emsp;&emsp;Mysql提供了很多种引擎，我们用的最多的是myisam，innodb，memory这三类。官方手册上说道myisqm比innodb的读速度要快，大概是3倍。不过书不能尽信啊，《OreIlly.High.Performance.Mysql》这本书里提到了myisam和innodb的比较，在测试中myisam的表现还不及innodb。至于memory，哈哈，还是比较好用的。在批处理种作临时表是个不错的选择(如果内存够大)。在我的一个批处理中，速度比近乎1：10。 Sql语句优化 Sql语句优化工具 慢日志 &emsp;&emsp;配置很简单，参数文件里配置： 12slow_query_log=d:/slow.txtlong_query_time = 2 &amp;emsp;&amp;emsp;慢日志文件可能会很大，让人去看是很难受的事。这时候我们可以通过mysql自带的工具来分析。 【1】简书主页·share猿 【2】掘金主页·share猿 【3】MySQL优化总结·周长亮 — 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"数据库","slug":"数据库","permalink":"https://lywlefan.github.io/tags/数据库/"},{"name":"优化","slug":"优化","permalink":"https://lywlefan.github.io/tags/优化/"}]},{"title":"Slack","date":"2011-12-31T16:00:00.000Z","path":"2012/01/01/工具/团队协作工具/Slack/","text":"工欲善其事，必先利器！ 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"协作","slug":"协作","permalink":"https://lywlefan.github.io/tags/协作/"},{"name":"开发","slug":"开发","permalink":"https://lywlefan.github.io/tags/开发/"}]}]