[{"title":"RestTemplate常见问题的解决办法.md","date":"2019-05-14T16:00:00.000Z","path":"2019/05/15/spring/spring-base/RestTemplate常见问题的解决办法/","text":"问题汇总 用restTemplate请求域名或着ip一直报No instances available的错 restTemplate的post请求报415错 问题处理用restTemplate请求域名或着ip一直报No instances available的错 错误描述 123java.lang.IllegalStateException: No instances available for www.baidu.comat org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient.execute(RibbonLoadBalancerClient.java:79) ~[spring-cloud-netflix-core-1.1.0.RELEASE.jar:1.1.0.RELEASE] at org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptor.intercept(LoadBalancerInterceptor.java:46) ~[spring-cloud-commons-1.1.0.RELEASE.jar:1.1.0.RELEASE] at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:86) ~[spring-web-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.http.client.InterceptingClientHttpRequest.executeInternal(InterceptingClientHttpRequest.java:70) ~[spring-web-4.3.10.RELEASE.jar:4.3.10.RELEASE] at ..... &emsp;&emsp;查看错误的跟踪链发现,自动注入的restTemplate中加入了cloud.netflix*包下面的interceptor, &emsp;&emsp;所以默认会通过RibbonLoadBalancerClient去查找注册中心的instances, &emsp;&emsp;如上面的代码，www.baidu.com肯定不存在，所以就报错了。 错误解决 &emsp;&emsp;重新实例化一个RestTemplate。 123456789101112131415@Configurationpublic class MyConfiguration &#123; @LoadBalanced @Bean RestTemplate loadBalanced() &#123; return new RestTemplate(); &#125; @Primary @Bean RestTemplate restTemplate() &#123; return new RestTemplate(); &#125;&#125; restTemplate的post请求报415错 错误描述 &emsp;&emsp;报错415 问具体解决 1234567HttpHeaders headers = new HttpHeaders();MediaType type = MediaType.parseMediaType(\"application/json;\");headers.setContentType(type);headers.add(\"Accept\", MediaType.APPLICATION_JSON.toString());JSONObject jsonObj = JSON.parseObject(JSON.toJSONString(payParams));HttpEntity&lt;String&gt; formEntity = new HttpEntity&lt;String&gt;(jsonObj.toString(), headers);restTemplate.postForObject(bestPayProperties.getBestPayUrl(),formEntity,String.class); 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"spring","slug":"spring","permalink":"https://lywlefan.github.io/tags/spring/"},{"name":"RestTemplate","slug":"RestTemplate","permalink":"https://lywlefan.github.io/tags/RestTemplate/"}]},{"title":"JAR包如何取工程外部文件","date":"2019-05-14T16:00:00.000Z","path":"2019/05/15/spring/spring-base/JAR包如何取工程外部文件/","text":"问题起源&emsp;&emsp;在开发支付stater的过程中会用到证书，而证书我们一般配置在工程项目中，那么我们自己开发的stater如何才能取到工程项目中的证书文件那？？？ 问题深究分解问题&emsp;&emsp;要想解决这个问题，我们要明确 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"spring","slug":"spring","permalink":"https://lywlefan.github.io/tags/spring/"},{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://lywlefan.github.io/tags/疑难杂症/"}]},{"title":"不用spring如何实例化一个bean","date":"2019-05-13T16:00:00.000Z","path":"2019/05/14/spring/spring-base/不用spring如何实例化一个bean/","text":"问题源起&emsp;&emsp;为什么写这么一篇文章那？主要还是源自最近在写支付的starter的过程中遇到的一个问题，我们知道在支付的过程中需要去配置一些相关的参数，因为是starter我们一般是通过配置文件的方式进行配置，引用我们stater的工程会通过yml文件中配置的属性把这些值给我们。 &emsp;&emsp;那么我想在stater里面取到这些值该如何去做那？？我直接new一个配置类对象但是却取不到，因此我们就在思考spring到底是如何实例化bean的？？他对bean做了什么？？如果不用spring的注解我们又该如何去实例化我们的bean那？带着这些问题我开始了我的解惑之旅。。。 问题深究提出问题，分解问题12345678910111213141516@AllArgsConstructor@RestController@RequestMapping(\"/api/v1/app/\")public class AppController extends BaseController &#123; @Autowired AppBannerService appBannerService; @RequestMapping(value = \"index\", method = RequestMethod.POST) public Result index(HttpServletRequest request,@RequestBody @Valid AppBannerAreaCode appBannerAreaCode) &#123; Map&lt;String,Object&gt; appMessage=new HashMap&lt;&gt;(); String appId=CommonUtils.getAppIdFromHeader(request); List&lt;AppBanner&gt; banners=appBannerService.getBannersByAppIdAndCode(appId,appBannerAreaCode.getProvinceCode()); return new Result(banners); &#125;&#125; &emsp;&emsp;上面的controller是我用日常开发常用的，AppBannerService是我们定义的业务接口，接口有实现类，我们只需要简单的注解就可以直接调用接口的方法了。 spring如何实例化bean？？ spring实例化方式有那些？？ 容器是如何实例化的？？ 我们假如不用这个注解如何去调这个接口那？？&emsp;&emsp;接下来我们就围绕以上两个问题进行展开。 解决各个问题spring实例化方式有那些？？&emsp;&emsp;软件开发到最后的最高境界就是制定标准，然后严格安装标准去开发和迭代。我个人认为spring也是如此，spring给自己定义了标准的四种实例化方式，我们在日常开发中就可以通过这四种实例化方式进行实例化，下面让我们一起细究一下这四种实例化方式： setter方法实例化 主类 1234567891011121314151617181920212223242526public interface IUserDao &#123; void addUser(); void delUser(); void updateUser(); &#125; public class UserDaoImpl implements IUserDao &#123; public void addUser() &#123; System.out.println(\"addUser方法被调用了\"); &#125; public void delUser() &#123; System.out.println(\"delUser方法被调用了\"); &#125; public void updateUser() &#123; System.out.println(\"updateUser方法被调用了\"); &#125; &#125; public class UserAction &#123; private IUserDao dao; //dao是一个依赖对象,要由springg进行管理,要生成 get set 方法 public void execute()&#123; dao.addUser(); dao.updateUser(); dao.delUser(); &#125; &#125; 配置文件 12345//配置文件&lt;bean name=\"userAction_name\" class=\"cat.action.UserAction\" &gt;&lt;property name=\"dao\" ref=\"userDao_name\" /&gt; //引用的是下面的名称&lt;/bean&gt; &lt;bean name=\"userDao_name\" class=\"cat.dao.UserDaoImpl\" /&gt; 测试 1234 //测试ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext(\"beans.xml\");UserAction action=(UserAction)ctx.getBean(\"userAction_name\");action.execute(); 构造函数 主类 123456789101112131415161718192021222324public class UserAction &#123; //public UserAction()&#123;&#125; 可以保保留一个无参的构造函数 //这是几个依赖对象,不用生成get set方法了 private UserInfo user; private String school; private IUserDao dao; //希望Spring 由构造函数注入依赖对象 public UserAction(IUserDao dao,UserInfo user,String school)&#123; this.dao=dao; this.school=school; this.user=user; &#125; public void execute()&#123; dao.addUser(); dao.updateUser(); dao.delUser(); System.out.println(user); System.out.println(school);&#125; 配置文件 123456789101112131415161718192021222324//配置文件&lt;bean name=\"userInfo_name\" class=\"cat.beans.UserInfo\" &gt; &lt;property name=\"id\" value=\"1\" /&gt; &lt;property name=\"userName\" value=\"周周\" /&gt; &lt;property name=\"password\" value=\"123\" /&gt; &lt;property name=\"note\" value=\"这是备注\" /&gt;&lt;/bean&gt; &lt;bean name=\"userAction_name\" class=\"cat.action.UserAction\" &gt; &lt;constructor-arg ref=\"userDao_name\" /&gt; &lt;constructor-arg ref=\"userInfo_name\" /&gt; &lt;constructor-arg value=\"哈尔滨师范大学\" /&gt;&lt;/bean&gt; /*也可以指定 索引和 type 属性 , 索引和type 都可以不指定&lt;bean name=\"userAction_name\" class=\"cat.action.UserAction\" &gt;&lt;constructor-arg index=\"0\" ref=\"userDao_name\" type=\"cat.dao.IUserDao\" /&gt; 如果是接口,就不能指定是实现类的类型&lt;constructor-arg index=\"1\" ref=\"userInfo_name\" type=\"cat.beans.UserInfo\" /&gt;&lt;constructor-arg index=\"2\" value=\"哈尔滨师范大学\" /&gt;&lt;/bean&gt;*/ &lt;bean name=\"userDao_name\" class=\"cat.dao.UserDaoImpl\" /&gt; 测试 1234//测试ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext(\"beans.xml\");UserAction action=(UserAction)ctx.getBean(\"userAction_name\");action.execute(); 静态工厂方式 主类 123456789101112131415161718192021//工厂,用来生成dao的实现类public class UserDaoFactory &#123;public static IUserDao createUserDaoInstance()&#123; return new UserDaoOracleImpl(); &#125;&#125; public class UserAction &#123; private IUserDao dao;//使用工厂方式注值,也要生成set方法 public void execute()&#123; dao.addUser(); dao.updateUser(); dao.delUser();&#125; public void setDao(IUserDao dao) &#123; this.dao = dao;&#125; &#125; 配置文件 123456//配置文件 &lt;bean name=\"userAction_name\" class=\"cat.action.UserAction\" &gt;&lt;property name=\"dao\" ref=\"userDao_name\" /&gt;&lt;/bean&gt; &lt;bean name=\"userDao_name\" class=\"cat.dao.UserDaoFactory\" factory-method=\"createUserDaoInstance\" /&gt; 测试 1234//测试ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext(\"beans.xml\");UserAction action=(UserAction)ctx.getBean(\"userAction_name\");action.execute(); 实例工厂 主类 1234567//工厂 =&gt;public class UserDaoFactory &#123;//这个方法不是静态的public IUserDao createUserDaoInstance()&#123; return new UserDaoOracleImpl(); &#125;&#125; 配置文件 1234567//配置文件 &lt;bean name=\"userAction_name\" class=\"cat.action.UserAction\" &gt;&lt;property name=\"dao\" ref=\"userDao_name\" /&gt;&lt;/bean&gt; &lt;bean name=\"userDaoFactory_name\" class=\"cat.dao.UserDaoFactory\" /&gt;&lt;bean name=\"userDao_name\" factory-bean=\"userDaoFactory_name\" factory-method=\"createUserDaoInstance\" /&gt; 测试 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"spring","slug":"spring","permalink":"https://lywlefan.github.io/tags/spring/"},{"name":"spring-base","slug":"spring-base","permalink":"https://lywlefan.github.io/tags/spring-base/"}]},{"title":"如何写一个stater","date":"2019-05-12T16:00:00.000Z","path":"2019/05/13/spring/spring-boot/如何写一个stater/","text":"目标刻在岩石上，方法写在沙滩上. 命名规范&emsp;&emsp;不要使用spring-boot开头的，以避免将来spring-boot官方使用你的starter而重名。 正例：xxxx-spring-boot-starter 反例：spring-boot-starter-xxxx 定功能&emsp;&emsp;你所定义的starter需要有自己的独特功能，比如spring-boot-starter-web 提供的springmvc相关的自动装配，内嵌tomcat以及相关依赖，那们你自己定义的starter也是需要界定好自己的功能。举个列子，比如要写一个支付的stater： 支付 支付通知 支付查询 退款 退款查询 退款通知 项目依赖 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"spring","slug":"spring","permalink":"https://lywlefan.github.io/tags/spring/"},{"name":"spring-boot","slug":"spring-boot","permalink":"https://lywlefan.github.io/tags/spring-boot/"}]},{"title":"spring的核心jar","date":"2018-05-29T16:00:00.000Z","path":"2018/05/30/spring/spring的核心jar/","text":"&emsp;&emsp;实践一门技术的最好方式就是深入理解它的思想，然后造一个出来！ Spring AOP：Spring的面向切面编程，提供AOP（面向切面编程）的实现 Spring Aspects：Spring提供的对AspectJ框架的整合 Spring Beans：Spring IOC的基础实现，包含访问配置文件、创建和管理bean等。 Spring Context：在基础IOC功能上提供扩展服务，此外还提供许多企业级服务的支持，有邮件服务、任务调度、JNDI定位，EJB集成、远程访问、缓存以及多种视图层框架的支持。 Spring Context Support：Spring context的扩展支持，用于MVC方面。 Spring Core：Spring的核心工具包 Spring expression：Spring表达式语言 Spring Framework Bom： Spring Instrument：Spring对服务器的代理接口 Spring Instrument Tomcat：Spring对tomcat连接池的集成 Spring JDBC：对JDBC 的简单封装 Spring JMS：为简化jms api的使用而做的简单封装 Spring Messaging： Spring orm：整合第三方的orm实现，如hibernate，ibatis，jdo以及spring 的jpa实现 Spring oxm：Spring对于object/xml映射的支持，可以让JAVA与XML之间来回切换 Spring test：对JUNIT等测试框架的简单封装 Spring tx：为JDBC、Hibernate、JDO、JPA等提供的一致的声明式和编程式事务管理。 Spring web：包含Web应用开发时，用到Spring框架时所需的核心类，包括自动载入WebApplicationContext特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类。 Spring webmvc：包含SpringMVC框架相关的所有类。包含国际化、标签、Theme、视图展现的FreeMarker、JasperReports、Tiles、Velocity、XSLT相关类。当然，如果你的应用使用了独立的MVC框架，则无需这个JAR文件里的任何类。 Spring webmvc portlet：Spring MVC的增强 【1】简书主页·share猿 【2】掘金主页·share猿 — 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"spring源码","slug":"spring源码","permalink":"https://lywlefan.github.io/tags/spring源码/"},{"name":"总汇","slug":"总汇","permalink":"https://lywlefan.github.io/tags/总汇/"}]},{"title":"如何快速寻找到一个问题的答案","date":"2011-12-31T16:00:00.000Z","path":"2012/01/01/如何快速寻找到一个问题的答案/","text":"目标刻在岩石上，方法写在沙滩上。 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"文章","slug":"文章","permalink":"https://lywlefan.github.io/tags/文章/"},{"name":"收藏","slug":"收藏","permalink":"https://lywlefan.github.io/tags/收藏/"}]},{"title":"我的网址收藏夹","date":"2011-12-31T16:00:00.000Z","path":"2012/01/01/网址收藏/","text":"目标刻在岩石上，方法写在沙滩上. 1.技术栈1.1.WEB开发1.1.1.前端1.1.2.后端1.2.高级技术1.2.1.深度学习 神经网络与深度学习·邱锡鹏 【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"收藏","slug":"收藏","permalink":"https://lywlefan.github.io/tags/收藏/"},{"name":"网址","slug":"网址","permalink":"https://lywlefan.github.io/tags/网址/"}]},{"title":"我的文章收藏夹","date":"2011-12-31T16:00:00.000Z","path":"2012/01/01/文章收藏/","text":"【1】简书主页·share猿【2】掘金主页·share猿 扫描以下公众号关注小猿↓↓↓↓↓↓↓↓ 更多资讯请在简书、微博、今日头条、掘金、CSDN都可以通过搜索“Share猿”找到小猿哦！！！","tags":[{"name":"文章","slug":"文章","permalink":"https://lywlefan.github.io/tags/文章/"},{"name":"收藏","slug":"收藏","permalink":"https://lywlefan.github.io/tags/收藏/"}]}]