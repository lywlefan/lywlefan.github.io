<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>share猿</title>
  
  <subtitle>https://lywlefan.github.io/</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lywlefan.github.io/"/>
  <updated>2019-05-14T05:39:45.284Z</updated>
  <id>https://lywlefan.github.io/</id>
  
  <author>
    <name>share猿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不用spring如何实例化一个bean</title>
    <link href="https://lywlefan.github.io/2019/05/14/spring/spring-base/%E4%B8%8D%E7%94%A8spring%E5%A6%82%E4%BD%95%E5%AE%9E%E4%BE%8B%E5%8C%96%E4%B8%80%E4%B8%AAbean/"/>
    <id>https://lywlefan.github.io/2019/05/14/spring/spring-base/不用spring如何实例化一个bean/</id>
    <published>2019-05-13T16:00:00.000Z</published>
    <updated>2019-05-14T05:39:45.284Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题源起"><a href="#问题源起" class="headerlink" title="问题源起"></a>问题源起</h3><p>&emsp;&emsp;为什么写这么一篇文章那？主要还是源自最近在写支付的starter的过程中遇到的一个问题，我们知道在支付的过程中需要去配置一些相关的参数，因为是starter我们一般是通过配置文件的方式进行配置，引用我们stater的工程会通过yml文件中配置的属性把这些值给我们。</p><p>&emsp;&emsp;那么我想在stater里面取到这些值该如何去做那？？我直接new一个配置类对象但是却取不到，因此我们就在思考spring到底是如何实例化bean的？？他对bean做了什么？？如果不用spring的注解我们又该如何去实例化我们的bean那？带着这些问题我开始了我的解惑之旅。。。</p><h3 id="问题深究"><a href="#问题深究" class="headerlink" title="问题深究"></a>问题深究</h3><h4 id="提出问题，分解问题"><a href="#提出问题，分解问题" class="headerlink" title="提出问题，分解问题"></a>提出问题，分解问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/v1/app/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AppBannerService appBannerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"index"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">index</span><span class="params">(HttpServletRequest request,@RequestBody @Valid AppBannerAreaCode appBannerAreaCode)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; appMessage=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        String appId=CommonUtils.getAppIdFromHeader(request);</span><br><span class="line">        List&lt;AppBanner&gt; banners=appBannerService.getBannersByAppIdAndCode(appId,appBannerAreaCode.getProvinceCode());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(banners);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面的controller是我用日常开发常用的，AppBannerService是我们定义的业务接口，接口有实现类，我们只需要简单的注解就可以直接调用接口的方法了。</p><h5 id="spring如何实例化bean？？"><a href="#spring如何实例化bean？？" class="headerlink" title="spring如何实例化bean？？"></a>spring如何实例化bean？？</h5><ul><li><p>spring实例化方式有那些？？</p></li><li><p>容器是如何实例化的？？</p></li></ul><h5 id="我们假如不用这个注解如何去调这个接口那？？"><a href="#我们假如不用这个注解如何去调这个接口那？？" class="headerlink" title="我们假如不用这个注解如何去调这个接口那？？"></a>我们假如不用这个注解如何去调这个接口那？？</h5><p>&emsp;&emsp;接下来我们就围绕以上两个问题进行展开。</p><h4 id="解决各个问题"><a href="#解决各个问题" class="headerlink" title="解决各个问题"></a>解决各个问题</h4><h5 id="spring实例化方式有那些？？"><a href="#spring实例化方式有那些？？" class="headerlink" title="spring实例化方式有那些？？"></a>spring实例化方式有那些？？</h5><p>&emsp;&emsp;软件开发到最后的最高境界就是制定标准，然后严格安装标准去开发和迭代。我个人认为spring也是如此，spring给自己定义了标准的四种实例化方式，我们在日常开发中就可以通过这四种实例化方式进行实例化，下面让我们一起细究一下这四种实例化方式：</p><h6 id="setter方法实例化"><a href="#setter方法实例化" class="headerlink" title="setter方法实例化"></a>setter方法实例化</h6><ul><li>主类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">                <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>;</span><br><span class="line">                <span class="function"><span class="keyword">void</span> <span class="title">delUser</span><span class="params">()</span></span>;</span><br><span class="line">                <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"addUser方法被调用了"</span>);</span><br><span class="line">                &#125;        </span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"delUser方法被调用了"</span>);</span><br><span class="line">                &#125;        </span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"updateUser方法被调用了"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">private</span> IUserDao dao; <span class="comment">//dao是一个依赖对象,要由springg进行管理,要生成 get set 方法</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">                            dao.addUser();</span><br><span class="line">                            dao.updateUser();</span><br><span class="line">                            dao.delUser();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//配置文件</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userAction_name"</span> <span class="attr">class</span>=<span class="string">"cat.action.UserAction"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dao"</span> <span class="attr">ref</span>=<span class="string">"userDao_name"</span> /&gt;</span>  //引用的是下面的名称</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao_name"</span> <span class="attr">class</span>=<span class="string">"cat.dao.UserDaoImpl"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//测试</span></span><br><span class="line">ClassPathXmlApplicationContext ctx=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">UserAction action=(UserAction)ctx.getBean(<span class="string">"userAction_name"</span>);</span><br><span class="line">action.execute();</span><br></pre></td></tr></table></figure><h6 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h6><ul><li>主类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> </span>&#123;</span><br><span class="line">       <span class="comment">//public UserAction()&#123;&#125; 可以保保留一个无参的构造函数</span></span><br><span class="line">                </span><br><span class="line">       <span class="comment">//这是几个依赖对象,不用生成get set方法了</span></span><br><span class="line">       <span class="keyword">private</span> UserInfo user;</span><br><span class="line">       <span class="keyword">private</span> String school;</span><br><span class="line">       <span class="keyword">private</span> IUserDao dao;     </span><br><span class="line">            </span><br><span class="line">       <span class="comment">//希望Spring 由构造函数注入依赖对象</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">UserAction</span><span class="params">(IUserDao dao,UserInfo user,String school)</span></span>&#123;</span><br><span class="line">              <span class="keyword">this</span>.dao=dao;</span><br><span class="line">              <span class="keyword">this</span>.school=school;</span><br><span class="line">              <span class="keyword">this</span>.user=user;</span><br><span class="line">              &#125;</span><br><span class="line">                </span><br><span class="line">            </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">              dao.addUser();</span><br><span class="line">              dao.updateUser();</span><br><span class="line">              dao.delUser();</span><br><span class="line">                    </span><br><span class="line">              System.out.println(user);</span><br><span class="line">              System.out.println(school);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//配置文件</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userInfo_name"</span> <span class="attr">class</span>=<span class="string">"cat.beans.UserInfo"</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"周周"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"note"</span> <span class="attr">value</span>=<span class="string">"这是备注"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userAction_name"</span> <span class="attr">class</span>=<span class="string">"cat.action.UserAction"</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"userDao_name"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"userInfo_name"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"哈尔滨师范大学"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">/*</span><br><span class="line">也可以指定 索引和 type 属性 , 索引和type 都可以不指定</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userAction_name"</span> <span class="attr">class</span>=<span class="string">"cat.action.UserAction"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"userDao_name"</span> <span class="attr">type</span>=<span class="string">"cat.dao.IUserDao"</span> /&gt;</span>  如果是接口,就不能指定是实现类的类型</span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">ref</span>=<span class="string">"userInfo_name"</span> <span class="attr">type</span>=<span class="string">"cat.beans.UserInfo"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"哈尔滨师范大学"</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">*/</span><br><span class="line">                </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao_name"</span> <span class="attr">class</span>=<span class="string">"cat.dao.UserDaoImpl"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line">ClassPathXmlApplicationContext ctx=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">UserAction action=(UserAction)ctx.getBean(<span class="string">"userAction_name"</span>);</span><br><span class="line">action.execute();</span><br></pre></td></tr></table></figure><h6 id="静态工厂方式"><a href="#静态工厂方式" class="headerlink" title="静态工厂方式"></a>静态工厂方式</h6><ul><li>主类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工厂,用来生成dao的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IUserDao <span class="title">createUserDaoInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> UserDaoOracleImpl();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">           </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> IUserDao dao;<span class="comment">//使用工厂方式注值,也要生成set方法</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">              dao.addUser();</span><br><span class="line">              dao.updateUser();</span><br><span class="line">              dao.delUser();</span><br><span class="line">&#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(IUserDao dao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dao = dao;</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//配置文件 </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userAction_name"</span> <span class="attr">class</span>=<span class="string">"cat.action.UserAction"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dao"</span>  <span class="attr">ref</span>=<span class="string">"userDao_name"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">              </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao_name"</span> <span class="attr">class</span>=<span class="string">"cat.dao.UserDaoFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createUserDaoInstance"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line">ClassPathXmlApplicationContext ctx=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">UserAction action=(UserAction)ctx.getBean(<span class="string">"userAction_name"</span>);</span><br><span class="line">action.execute();</span><br></pre></td></tr></table></figure><h6 id="实例工厂"><a href="#实例工厂" class="headerlink" title="实例工厂"></a>实例工厂</h6><ul><li>主类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工厂 =&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">//这个方法不是静态的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  IUserDao <span class="title">createUserDaoInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoOracleImpl();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//配置文件 </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userAction_name"</span> <span class="attr">class</span>=<span class="string">"cat.action.UserAction"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dao"</span>  <span class="attr">ref</span>=<span class="string">"userDao_name"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">              </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">name</span>=<span class="string">"userDaoFactory_name"</span> <span class="attr">class</span>=<span class="string">"cat.dao.UserDaoFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao_name"</span> <span class="attr">factory-bean</span>=<span class="string">"userDaoFactory_name"</span> <span class="attr">factory-method</span>=<span class="string">"createUserDaoInstance"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><blockquote><p><a href="https://www.jianshu.com/u/354cc1548a33" target="_blank" rel="noopener">【1】简书主页·share猿</a><br><a href="https://juejin.im/user/5a8e759851882524d842d174" target="_blank" rel="noopener">【2】掘金主页·share猿</a></p></blockquote><hr><p><strong>扫描以下公众号关注小猿↓↓↓↓↓↓↓↓</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/3084894-e6e9a10cf3e08bba?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>更多资讯请在<strong>简书、微博、今日头条、掘金、CSDN</strong>都可以通过搜索<strong>“Share猿”</strong>找到小猿哦！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题源起&quot;&gt;&lt;a href=&quot;#问题源起&quot; class=&quot;headerlink&quot; title=&quot;问题源起&quot;&gt;&lt;/a&gt;问题源起&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;为什么写这么一篇文章那？主要还是源自最近在写支付的starter的过程中遇到的一个问题，我们知道在支
      
    
    </summary>
    
      <category term="spring" scheme="https://lywlefan.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="https://lywlefan.github.io/tags/spring/"/>
    
      <category term="spring-base" scheme="https://lywlefan.github.io/tags/spring-base/"/>
    
  </entry>
  
  <entry>
    <title>如何写一个stater</title>
    <link href="https://lywlefan.github.io/2019/05/13/spring/spring-boot/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%B8%AAstater/"/>
    <id>https://lywlefan.github.io/2019/05/13/spring/spring-boot/如何写一个stater/</id>
    <published>2019-05-12T16:00:00.000Z</published>
    <updated>2019-05-13T10:38:00.905Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目标刻在岩石上，方法写在沙滩上.</p></blockquote><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>&emsp;&emsp;不要使用spring-boot开头的，以避免将来spring-boot官方使用你的starter而重名。</p><ul><li><p>正例：xxxx-spring-boot-starter</p></li><li><p>反例：spring-boot-starter-xxxx</p></li></ul><h3 id="定功能"><a href="#定功能" class="headerlink" title="定功能"></a>定功能</h3><p>&emsp;&emsp;你所定义的starter需要有自己的独特功能，比如spring-boot-starter-web 提供的springmvc相关的自动装配，内嵌tomcat以及相关依赖，那们你自己定义的starter也是需要界定好自己的功能。举个列子，比如要写一个支付的stater：</p><ul><li>支付</li><li>支付通知</li><li>支付查询</li><li>退款</li><li>退款查询</li><li>退款通知</li></ul><h3 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h3><blockquote><p><a href="https://www.jianshu.com/u/354cc1548a33" target="_blank" rel="noopener">【1】简书主页·share猿</a><br><a href="https://juejin.im/user/5a8e759851882524d842d174" target="_blank" rel="noopener">【2】掘金主页·share猿</a></p></blockquote><hr><p><strong>扫描以下公众号关注小猿↓↓↓↓↓↓↓↓</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/3084894-e6e9a10cf3e08bba?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>更多资讯请在<strong>简书、微博、今日头条、掘金、CSDN</strong>都可以通过搜索<strong>“Share猿”</strong>找到小猿哦！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;目标刻在岩石上，方法写在沙滩上.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;命名规范&quot;&gt;&lt;a href=&quot;#命名规范&quot; class=&quot;headerlink&quot; title=&quot;命名规范&quot;&gt;&lt;/a&gt;命名规范&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp
      
    
    </summary>
    
      <category term="spring" scheme="https://lywlefan.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="https://lywlefan.github.io/tags/spring/"/>
    
      <category term="spring-boot" scheme="https://lywlefan.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>spring的核心jar</title>
    <link href="https://lywlefan.github.io/2018/05/30/spring/spring%E7%9A%84%E6%A0%B8%E5%BF%83jar/"/>
    <id>https://lywlefan.github.io/2018/05/30/spring/spring的核心jar/</id>
    <published>2018-05-29T16:00:00.000Z</published>
    <updated>2019-05-13T05:51:20.837Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>&emsp;&emsp;实践一门技术的最好方式就是深入理解它的思想，然后造一个出来！</p></blockquote><ul><li>Spring AOP：Spring的面向切面编程，提供AOP（面向切面编程）的实现</li><li>Spring Aspects：Spring提供的对AspectJ框架的整合</li><li>Spring Beans：Spring IOC的基础实现，包含访问配置文件、创建和管理bean等。</li><li>Spring Context：在基础IOC功能上提供扩展服务，此外还提供许多企业级服务的支持，有邮件服务、任务调度、JNDI定位，EJB集成、远程访问、缓存以及多种视图层框架的支持。</li><li>Spring Context Support：Spring context的扩展支持，用于MVC方面。</li><li>Spring Core：Spring的核心工具包</li><li>Spring expression：Spring表达式语言</li><li>Spring Framework Bom：</li><li>Spring Instrument：Spring对服务器的代理接口</li><li>Spring Instrument Tomcat：Spring对tomcat连接池的集成</li><li>Spring JDBC：对JDBC 的简单封装</li><li>Spring JMS：为简化jms api的使用而做的简单封装</li><li>Spring Messaging：</li><li>Spring orm：整合第三方的orm实现，如hibernate，ibatis，jdo以及spring 的jpa实现</li><li>Spring oxm：Spring对于object/xml映射的支持，可以让JAVA与XML之间来回切换</li><li>Spring test：对JUNIT等测试框架的简单封装</li><li>Spring tx：为JDBC、Hibernate、JDO、JPA等提供的一致的声明式和编程式事务管理。</li><li>Spring web：包含Web应用开发时，用到Spring框架时所需的核心类，包括自动载入WebApplicationContext特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类。</li><li>Spring webmvc：包含SpringMVC框架相关的所有类。包含国际化、标签、Theme、视图展现的FreeMarker、JasperReports、Tiles、Velocity、XSLT相关类。当然，如果你的应用使用了独立的MVC框架，则无需这个JAR文件里的任何类。</li><li>Spring webmvc portlet：Spring MVC的增强</li></ul><blockquote><p><a href="https://www.jianshu.com/u/354cc1548a33" target="_blank" rel="noopener">【1】简书主页·share猿</a>﻿<br><a href="https://juejin.im/user/5a8e759851882524d842d174" target="_blank" rel="noopener">【2】掘金主页·share猿</a>﻿﻿</p></blockquote><p>—﻿</p><p><strong>扫描以下公众号关注小猿↓↓↓↓↓↓↓↓</strong>﻿</p><p><img src="http://upload-images.jianshu.io/upload_images/3084894-e6e9a10cf3e08bba?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt>﻿﻿</p><p>更多资讯请在<strong>简书、微博、今日头条、掘金、CSDN</strong>都可以通过搜索<strong>“Share猿”</strong>找到小猿哦！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;实践一门技术的最好方式就是深入理解它的思想，然后造一个出来！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Spring AOP：Spring的面向切面编程，提供AOP（面向切面编程）的实现&lt;/li&gt;
&lt;li&gt;Spr
      
    
    </summary>
    
      <category term="spring" scheme="https://lywlefan.github.io/categories/spring/"/>
    
    
      <category term="spring源码" scheme="https://lywlefan.github.io/tags/spring%E6%BA%90%E7%A0%81/"/>
    
      <category term="总汇" scheme="https://lywlefan.github.io/tags/%E6%80%BB%E6%B1%87/"/>
    
  </entry>
  
  <entry>
    <title>如何快速寻找到一个问题的答案</title>
    <link href="https://lywlefan.github.io/2012/01/01/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AF%BB%E6%89%BE%E5%88%B0%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98%E7%9A%84%E7%AD%94%E6%A1%88/"/>
    <id>https://lywlefan.github.io/2012/01/01/如何快速寻找到一个问题的答案/</id>
    <published>2011-12-31T16:00:00.000Z</published>
    <updated>2019-05-14T09:57:54.504Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目标刻在岩石上，方法写在沙滩上。</p></blockquote><blockquote><p><a href="https://www.jianshu.com/u/354cc1548a33" target="_blank" rel="noopener">【1】简书主页·share猿</a><br><a href="https://juejin.im/user/5a8e759851882524d842d174" target="_blank" rel="noopener">【2】掘金主页·share猿</a></p></blockquote><hr><p><strong>扫描以下公众号关注小猿↓↓↓↓↓↓↓↓</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/3084894-e6e9a10cf3e08bba?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>更多资讯请在<strong>简书、微博、今日头条、掘金、CSDN</strong>都可以通过搜索<strong>“Share猿”</strong>找到小猿哦！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;目标刻在岩石上，方法写在沙滩上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/u/354cc1548a33&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
      <category term="收藏夹" scheme="https://lywlefan.github.io/categories/%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
    
    
      <category term="文章" scheme="https://lywlefan.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="收藏" scheme="https://lywlefan.github.io/tags/%E6%94%B6%E8%97%8F/"/>
    
  </entry>
  
  <entry>
    <title>我的网址收藏夹</title>
    <link href="https://lywlefan.github.io/2012/01/01/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/"/>
    <id>https://lywlefan.github.io/2012/01/01/网址收藏/</id>
    <published>2011-12-31T16:00:00.000Z</published>
    <updated>2019-05-13T10:32:04.715Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目标刻在岩石上，方法写在沙滩上.</p></blockquote><h2 id="1-技术栈"><a href="#1-技术栈" class="headerlink" title="1.技术栈"></a>1.技术栈</h2><h3 id="1-1-WEB开发"><a href="#1-1-WEB开发" class="headerlink" title="1.1.WEB开发"></a>1.1.WEB开发</h3><h4 id="1-1-1-前端"><a href="#1-1-1-前端" class="headerlink" title="1.1.1.前端"></a>1.1.1.前端</h4><h4 id="1-1-2-后端"><a href="#1-1-2-后端" class="headerlink" title="1.1.2.后端"></a>1.1.2.后端</h4><h3 id="1-2-高级技术"><a href="#1-2-高级技术" class="headerlink" title="1.2.高级技术"></a>1.2.高级技术</h3><h4 id="1-2-1-深度学习"><a href="#1-2-1-深度学习" class="headerlink" title="1.2.1.深度学习"></a>1.2.1.深度学习</h4><ul><li><a href="https://nndl.github.io/" target="_blank" rel="noopener">神经网络与深度学习·邱锡鹏</a></li></ul><blockquote><p><a href="https://www.jianshu.com/u/354cc1548a33" target="_blank" rel="noopener">【1】简书主页·share猿</a><br><a href="https://juejin.im/user/5a8e759851882524d842d174" target="_blank" rel="noopener">【2】掘金主页·share猿</a></p></blockquote><hr><p><strong>扫描以下公众号关注小猿↓↓↓↓↓↓↓↓</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/3084894-e6e9a10cf3e08bba?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>更多资讯请在<strong>简书、微博、今日头条、掘金、CSDN</strong>都可以通过搜索<strong>“Share猿”</strong>找到小猿哦！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;目标刻在岩石上，方法写在沙滩上.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-技术栈&quot;&gt;&lt;a href=&quot;#1-技术栈&quot; class=&quot;headerlink&quot; title=&quot;1.技术栈&quot;&gt;&lt;/a&gt;1.技术栈&lt;/h2&gt;&lt;h3 id=&quot;1-
      
    
    </summary>
    
      <category term="收藏夹" scheme="https://lywlefan.github.io/categories/%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
    
    
      <category term="收藏" scheme="https://lywlefan.github.io/tags/%E6%94%B6%E8%97%8F/"/>
    
      <category term="网址" scheme="https://lywlefan.github.io/tags/%E7%BD%91%E5%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>我的文章收藏夹</title>
    <link href="https://lywlefan.github.io/2012/01/01/%E6%96%87%E7%AB%A0%E6%94%B6%E8%97%8F/"/>
    <id>https://lywlefan.github.io/2012/01/01/文章收藏/</id>
    <published>2011-12-31T16:00:00.000Z</published>
    <updated>2019-05-13T10:28:39.501Z</updated>
    
    <content type="html"><![CDATA[<blockquote></blockquote><blockquote><p><a href="https://www.jianshu.com/u/354cc1548a33" target="_blank" rel="noopener">【1】简书主页·share猿</a><br><a href="https://juejin.im/user/5a8e759851882524d842d174" target="_blank" rel="noopener">【2】掘金主页·share猿</a></p></blockquote><hr><p><strong>扫描以下公众号关注小猿↓↓↓↓↓↓↓↓</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/3084894-e6e9a10cf3e08bba?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>更多资讯请在<strong>简书、微博、今日头条、掘金、CSDN</strong>都可以通过搜索<strong>“Share猿”</strong>找到小猿哦！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/u/354cc1548a33&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【1】简书主页·share猿&lt;/a
      
    
    </summary>
    
      <category term="收藏夹" scheme="https://lywlefan.github.io/categories/%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
    
    
      <category term="文章" scheme="https://lywlefan.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="收藏" scheme="https://lywlefan.github.io/tags/%E6%94%B6%E8%97%8F/"/>
    
  </entry>
  
</feed>
